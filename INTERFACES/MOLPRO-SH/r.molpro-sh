#!/bin/bash

# This script is should be called by ABIN as
# MOLPRO-SH/r.molpro-sh timestep 001 force-accu < state.dat

# You should't need to modify this file!
# Specification of CAS wavefunction is in file molpro.setup

cd $(dirname $0)

timestep=$1
ibead=$2
input=input$ibead
if [[ -z $3 ]];then
   accu=7
else
   accu=$3
fi


source ../SetEnvironment.sh MOLPRO

# Definition of wavefunction
# (common for both forces and NACME)
source molpro.setup
####################################################################

#-COMMENTS ON DF-CASSCF---------------------------------------------
#-For new density fitting CASSCF code, seek more info here: http://www.molpro.net/info/2012.1/doc/update/node6.html
#-http://www.molpro.net/info/2012.1/doc/manual/node114.html - about basis sets
#-about Density Fitting: http://www.molpro.net/info/2012.1/doc/manual/node133.html
#-Easiest way to do DF-CASSCF is to use turbomole (Ahlrichs) Def2 basis sets (SVP,TZVP etc.)
#-For Dunnging basis sets, DF bases are available, but you won't calculate NAC
#-For Pople basis sets, you need to specify DF basis manually, probably some of the DF Ahlrichs basis sets.

rm -f ../engrad.dat.$ibead ../nacm.dat

#-How many atoms?
natom=$(cat ../geom.dat.$ibead | wc -l )
let natom1=natom+1 
let natom2=natom+2 

# reading from state.dat
# Number of states,state we are on and which NACM to compute
read -t 2 -a nstate
read -t 2 -a tocalc

# MOLPRO-CASSCF
# wavefunction passed between steps via input.wfu
# if you don't want that, comment out the second line
# 3rd line is needed, we take forces and NACME from input.pun
cat > $input.com << EOF
***Abin input
memory, $memory, m;
file, 2, $input.wfu, unknown
PUNCH, $input.pun, new
gprint, orbital, civector

Angstrom

geometry=../geom.dat.$ibead

basis=$basis

!-for simple CASSCF, you don't need to modify anything below this

!-we need to get rid of the SAMC records in file 2 (input.wfu,restart file)
!-otherwise, the forces and NACME are wrong for the following reason
!-cpmscf will not rewrite itself it but ather write into following records
!-but the subsequent call to forces would read from old records -> wrong numbers
!-we use file 2 for forces and NACME due to df-casscf
data,truncate,2,3000

if (lastorb.ne.MCSCF)then
   {hf;wf,$nelectrons,0,$spin}
   $multi;
   occ,$nocc;
   closed,$nclosed;
   WF,$nelectrons,0,$spin;
   state,$nstate;
   maxiter,40;
   orbital,2101.2
   save,ci=2501.2
endif

data, copy, 2101.2, 3000.2

{$multi;
occ,$nocc;
closed,$nclosed;
WF,$nelectrons,0,$spin;
state,$nstate;
maxiter,2;
orbital,2101.2
ciguess,2501.2
save,ci=2501.2
diab,3000.2,save=2101.2,method=-1
}

if (status.lt.0) then
   text, MCSCF failed to converge.
   text, Attempting uncoupled iterations.
   text, Enlarging PSPACE.
   {$multi;
   occ,$nocc;
   closed,$nclosed;
   WF,$nelectrons,0,$spin;
   ! Info about pspace: https://www.molpro.net/info/2015.1/doc/manual/node244.html
   ! uncomment in case of convergence difficulties...
   pspace, 2;
   state,$nstate;
   maxiter,40;
   orbital,2101.2
   ciguess,2501.2
   save,ci=2501.2
   diab,3000.2,save=2101.2,method=-1
   {iterations
   do,uncouple,1,to,5}
   }
   if (status.lt.0) then
      text, Uncoupled iterations did not help, exiting.
      STOP
   endif

endif

EOF

# Now code for calculating gradients

cat > cas.tmp << EOF

TEXT, Calculating gradients. 
$multi;
occ,$nocc;
closed,$nclosed;
WF,$nelectrons,0,$spin;
state,$nstate;
orbital,2101.2
ciguess,2501.2
save,ci=2501.2
diab,3000.2,save=2101.2,method=-1
DM;  ! calculate dipole moments

EOF

# In standard MOLPRO install, one cannot have more than
# 5 CPMSCF cards per one multi command
# Hence the following weirdness
# (one might need forces for more states e.g. for Ehrenfest MD)
MAX_CPMSCF_CARDS=5

# Count the total number of gradient calcs
NUM_CPMSCF=0
for ((ist=0;ist<nstate;ist++)) {
   let NUM_CPMSCF+=${tocalc[$ist]}
}
let NUM_MULTI=NUM_CPMSCF/MAX_CPMSCF_CARDS
if [[ $NUM_MULTI -eq 0 ]];then
   NUM_MULTI=1
fi

istate=0
rec=5100
for ((n=1;n<=NUM_MULTI;n++))
do
   cat cas.tmp >> $input.com

   pom=0
   for ((ist=istate; ist<nstate; ist++))
   do
      if [[ ${tocalc[$ist]} -eq 1 ]];then
         # MOLPRO numbering starts from 1
         let j=ist+1
         # Store corresponding cpmscf and forces commands
         cpmscf[$pom]="cpmcscf, grad, $j.1, save=$rec.2, accu=1d-$accu;"
         echo "${cpmscf[$pom]}" >> $input.com
         forces[$pom]="forces; samc, $rec.2;"
         let rec++
         let pom++
      fi
      let istate++
      if [[ $pom -eq $MAX_CPMSCF_CARDS ]];then
         break
      fi
   done
   
   # Print corresponding forces commands
   for ((i=0; i<pom; i++)); do
      echo ${forces[$i]} >> $input.com
   done

done

# Calculate Mullican charges
for ((ist1=1;ist1<=nstate;ist1++)) {
   echo "pop; density,2101.2,state=$ist1.1" >> $input.com
}

#----------MOLPRO JOB-------------------------
export TMPDIR=$PWD/scratch$ibead
$MOLPROEXE -s --no-xml-output -W $PWD/scratch$ibead  >& $input.com.out <$input.com

# Check whether all is OK.
# If it is some other error, do nothing. It's up to ABIN to decide what to do.
if [[ $? -ne 0 ]];then

   cp $input.com.out $input.com.out.error.$timestep
   if $( grep -q 'NO CONVER' $input.com.out ) ;then 

      echo "ERROR: Could not converge forces!"
      exit 3

   else

      echo "ERROR during execution of MOLPRO. See $input.com.out"
      exit 2

   fi
fi

#####################################################################

# NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN

# Extracting energy. This should work even for CASPT2 energies.
grep 'Energy          ' $input.com.out | awk -F "Energy" '{print $2}' | tail -n $nstate >> ../engrad.dat.$ibead

# Extracting GRADIENT
# Should work for both CASPT2 and CASSCF gradients
grep "GRADIENT," $input.pun | awk -F" " '{print $5,$6,$7}'>>../engrad.dat.$ibead

echo "TIMESTEP = $timestep" >> $input.com.out.all
echo "####################" >> $input.com.out.all
cat $input.com.out >> $input.com.out.all


# TODO: Handle charges inside ABIN
# grep 'Unique atom' $input.com.out -A$natom | awk -F " " '{print $2 "  " $9 $10}'>>../charges.all

