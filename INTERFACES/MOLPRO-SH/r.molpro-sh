#!/bin/bash

# This script is should be called by ABIN as
# MOLPRO-SH/r.molpro-sh timestep 001 force-accu < state.dat

cd MOLPRO-SH

timestep=$1
ibead=$2
input=input$ibead
if [[ -z $3 ]];then
   accu=7
else
   accu=$3
fi


source ../SetEnvironment.sh MOLPRO

# Definition of wavefunction
# (common for both forces and NACME)
source molpro.setup
####################################################################

#-COMMENTS ON DF-CASSCF---------------------------------------------
#-For new density fitting CASSCF code, seek more info here: http://www.molpro.net/info/2012.1/doc/update/node6.html
#-http://www.molpro.net/info/2012.1/doc/manual/node114.html - about basis sets
#-about Density Fitting: http://www.molpro.net/info/2012.1/doc/manual/node133.html
#-Easiest way to do DF-CASSCF is to use turbomole (Ahlrichs) Def2 basis sets (SVP,TZVP etc.)
#-For Dunnging basis sets, DF bases are available, but you won't calculate NAC
#-For Pople basis sets, you need to specify DF basis manually, probably some of the DF Ahlrichs basis sets.

rm -f ../engrad.dat.$ibead ../nacm.dat

#-How many atoms?
natom=$(cat ../geom.dat.$ibead | wc -l )
let natom1=natom+1 
let natom2=natom+2 

# reading from state.dat
# Number of states,state we are on and which NACM to compute
read -t 2 -a nstate
read -t 2 -a tocalc

# MOLPRO-CASSCF
# wavefunction passed between steps via input.wfu
# if you don't want that, comment out the second line
# 3rd line is needed, we take forces and NACME from input.pun
cat > $input.pom1 << EOF
***Abin input
memory,$memory,m;
file,2,$input.wfu,unknown
PUNCH,$input.pun,new
gprint,orbital,civector

Angstrom

geometry=../geom.dat.$ibead

basis=$basis

!-for simple CASSCF, you don't need to modify anything below this

!-we need to get rid of the SAMC records in file 2 (input.wfu,restart file)
!-otherwise, the forces and NACME are wrong for the following reason
!-cpmscf will not rewrite itself it but ather write into following records
!-but the subsequent call to forces would read from old records -> wrong numbers
!-we use file 2 for forces and NACME due to df-casscf
data,truncate,2,5100

if (lastorb.ne.MCSCF)then
   {hf;wf,$nelectrons,0,$spin}
endif
EOF


# TODO: Make the following much simpler

for ((ist1=1;ist1<=nstate;ist1++)) {
echo "pop; density,2140.2,state=$ist1.1" >> $input.pom2
}


cat > $input.pom3 << EOF
$multi;
occ,$nocc;
closed,$nclosed;
WF,$nelectrons,0,$spin;
state,$nstate;
maxiter,30;
EOF

rec=5101
pom=0
for ((ist1=1;ist1<=nstate-1;ist1++)) {
      if [[ ${tocalc[$pom]} -eq 1 ]];then
         echo "cpmcscf, grad,$ist1.1,save=$rec.2,accu=1d-$accu;" >> $input.pom3
         let rec++
      fi
      let pom++
   }
}


rec=5101
pom=0
for ((ist1=1;ist1<=nstate-1;ist1++)) {
   for ((ist2=ist1+1;ist2<=nstate;ist2++)) {
      if [[ ${tocalc[$pom]} -eq 1 ]];then
         echo "forces; samc,$rec.2;" >> $input.pom3
         let rec++
      fi
      let pom++
   }
}

awk -F " " 'BEGIN{i=1;k=1;inp=1}{
 if ( $1 == "cpmcscf" ) {
	 cpm[i]=$0
	 i++
 }
 else if ( $1 == "forces" ) {
	 forces[k]=$0
	 k++
 }
 else { 
	 input[inp]=$0
	 inp++
 }
 }END{
 for (i=1;i<k;i=i+5) {
	print ""
  	for (j=1;j<inp;j++) print input[j]
  	for (j=0;j<5;j++) print cpm[i+j]
	for (j=0;j<5;j++) print forces[i+j]
	}
}' $input.pom3 > $input.pom4

#--------------------------------------------------------------------
#- BUILDING input.com------------------------------------------------
cat $input.pom1 > $input.com  #basic parameters and commands
cat $input.pom4 >> $input.com  
cat $input.pom2 >> $input.com 
#--END OF MOLPRO INPUT------------------------

#----------MOLPRO JOB-------------------------
export TMPDIR=$PWD/scratch$ibead
$MOLPROEXE -s --no-xml-output -W $PWD/scratch$ibead  >& $input.com.out <$input.com

# Check whether all is OK.
#-If it is some other error (e.g. NAC convergence), do nothing. It's up to ABIN to decide what to do.
if [[ $? -ne 0 ]];then

   cp $input.com.out $input.com.out.error.$timestep
   if $( grep -q 'NO CONVER' $input.com.out ) ;then 

      echo "ERROR: Could not converge forces!"
      exit 3

   else

      echo "ERROR during execution of MOLPRO. See $input.com.out"
      exit 2

   fi
fi

#####################################################################
#--------------------------------------------------------------------
#-NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN-------------------------

#- Extracting energy. This should work even for CASPT2 energies.
grep 'Energy          ' $input.com.out | awk -F "Energy" '{print $2}' | tail -n $nstate >> ../engrad.dat.$ibead

#-Extracting GRADIENT
#-Should work for both CASPT2 and CASSCF gradients
grep "GRADIENT," $input.pun | awk -F" " '{print $5,$6,$7}'>>../engrad.dat.$ibead

echo "TIMESTEP = $timestep" >> $input.com.out.all
echo "####################" >> $input.com.out.all
cat $input.com.out >> $input.com.out.all


# TODO: Handle charges inside ABIN
grep 'Unique atom' $input.com.out -A$natom | awk -F " " '{print $2 "  " $9 $10}'>>../charges.all

