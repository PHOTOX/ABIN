#!/bin/bash
cd CASTEP

# These to files needs to be prepared for CASTEP
CELL_FILE=template.cell
PARAM_FILE=template.param
# (we do not touch param file, only make a copy)
# new cell file is generated each time step from CELL_FILE
# and XYZ geometry from ABIN (from file ../geom.dat.$ibead)

timestep=$1
ibead=$2
input=input$ibead
natom=$(cat ../geom.dat.$ibead | wc -l )

./prepare_castep_cellfile.py -c $CELL_FILE -x ../geom.dat.$ibead > $input.cell

# Copy param file
cp $PARAM_FILE $input.param

output=$input.castep
# CASTEP by default apppends, so remove the old output files
rm -f $output $input.cst_esp $input.check $input.castep_bin
# LAUNCHING CASTEP #

# It seems that CASTEP also outputs to stdin, so we need to get rid of that
mpiexec castep $input > /dev/null

if [[ $? -eq 0 ]];then
   cp $output $output.old
#  cat $output >  $output.all
else
   echo "WARNING from r.castep: CASTEP calculation probably failed."
   echo "See $output.error" 
   cp $output $output.error
   exit 2
fi

### EXTRACTING ENERGY AND FORCES
# We are expecting energy and forces in defult CASTEP units
# i.e. eV and eV/Angstroms

# First look whether we have dispersion corrections
energy=$(grep 'Dispersion corrected final energy' $output | tail -1 | awk '{printf("%10.8e\n",$6/27.2113838)}')

if [[ -z $energy ]];then
   energy=$(grep 'Final energy ' $output | tail -1 | awk '{printf("%10.8e\n",$4/27.2113838)}')
fi

# Crash if we do not have energy!
if [[ -z $energy ]];then
   echo "ERROR: I could not find the energy in the CASTEP output file!"
   exit 2
else
   echo $energy > ../engrad.dat.$ibead
fi

let natom5=natom+5
# Now grep forces
# Don't forget to convert to atomic units
# Also, we need energy gradients, not forces. Hence the minus sign
grep -A $natom5 Forces $output | tail -n $natom | awk 'BEGIN{c=1/27.2113838/1.88972613}{printf("%10.6f  %10.6f  %10.6f\n", -$4*c, -$5*c, -$6*c)}' >> ../engrad.dat.$ibead


