
#line 3 "<nabout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define mmoconst const
#else
#define mmoconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (mmo_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((mmo_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mmorestart(mmoin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(mmo_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct mmo_buffer_state *YY_BUFFER_STATE;
#endif

extern int mmoleng;

extern FILE *mmoin, *mmoout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define mmoless(n) \
	do \
		{ \
		/* Undo effects of setting up mmotext. */ \
        int mmoless_macro_arg = (n); \
        YY_LESS_LINENO(mmoless_macro_arg);\
		*mmo_cp = (mmo_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(mmo_c_buf_p) = mmo_cp = mmo_bp + mmoless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mmotext again */ \
		} \
	while ( 0 )

#define unput(c) mmounput( c, (mmotext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t mmo_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct mmo_buffer_state
	{
	FILE *mmo_input_file;

	char *mmo_ch_buf;		/* input buffer */
	char *mmo_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	mmo_size_t mmo_buf_size;

	/* Number of characters read into mmo_ch_buf, not including EOB
	 * characters.
	 */
	int mmo_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int mmo_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int mmo_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int mmo_at_bol;

    int mmo_bs_lineno; /**< The line count. */
    int mmo_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int mmo_fill_buffer;

	int mmo_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mmorestart()), so that the user can continue scanning by
	 * just pointing mmoin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t mmo_buffer_stack_top = 0; /**< index of top of stack. */
static size_t mmo_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * mmo_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (mmo_buffer_stack) \
                          ? (mmo_buffer_stack)[(mmo_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (mmo_buffer_stack)[(mmo_buffer_stack_top)]

/* mmo_hold_char holds the character lost when mmotext is formed. */
static char mmo_hold_char;
static int mmo_n_chars;		/* number of characters read into mmo_ch_buf */
int mmoleng;

/* Points to current character in buffer. */
static char *mmo_c_buf_p = (char *) 0;
static int mmo_init = 0;		/* whether we need to initialize */
static int mmo_start = 0;	/* start state number */

/* Flag which is used to allow mmowrap()'s to do buffer switches
 * instead of setting up a fresh mmoin.  A bit of a hack ...
 */
static int mmo_did_buffer_switch_on_eof;

void mmorestart (FILE *input_file  );
void mmo_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE mmo_create_buffer (FILE *file,int size  );
void mmo_delete_buffer (YY_BUFFER_STATE b  );
void mmo_flush_buffer (YY_BUFFER_STATE b  );
void mmopush_buffer_state (YY_BUFFER_STATE new_buffer  );
void mmopop_buffer_state (void );

static void mmoensure_buffer_stack (void );
static void mmo_load_buffer_state (void );
static void mmo_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER mmo_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE mmo_scan_buffer (char *base,mmo_size_t size  );
YY_BUFFER_STATE mmo_scan_string (mmoconst char *mmo_str  );
YY_BUFFER_STATE mmo_scan_bytes (mmoconst char *bytes,int len  );

void *mmoalloc (mmo_size_t  );
void *mmorealloc (void *,mmo_size_t  );
void mmofree (void *  );

#define mmo_new_buffer mmo_create_buffer

#define mmo_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mmoensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mmo_create_buffer(mmoin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->mmo_is_interactive = is_interactive; \
	}

#define mmo_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mmoensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mmo_create_buffer(mmoin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->mmo_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->mmo_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *mmoin = (FILE *) 0, *mmoout = (FILE *) 0;

typedef int mmo_state_type;

extern int mmolineno;

int mmolineno = 1;

extern char *mmotext;
#define mmotext_ptr mmotext

static mmo_state_type mmo_get_previous_state (void );
static mmo_state_type mmo_try_NUL_trans (mmo_state_type current_state  );
static int mmo_get_next_buffer (void );
static void mmo_fatal_error (mmoconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mmotext.
 */
#define YY_DO_BEFORE_ACTION \
	(mmotext_ptr) = mmo_bp; \
	mmoleng = (size_t) (mmo_cp - mmo_bp); \
	(mmo_hold_char) = *mmo_cp; \
	*mmo_cp = '\0'; \
	(mmo_c_buf_p) = mmo_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct mmo_trans_info
	{
	flex_int32_t mmo_verify;
	flex_int32_t mmo_nxt;
	};
static mmoconst flex_int16_t mmo_accept[924] =
    {   0,
        0,    0,  141,  139,  138,  138,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  138,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0,    0,    0,    0,    0,    0,    0,   53,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,  100,   99,    0,   28,
        0,    0,   27,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   73,   74,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
      134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
       10,   11,    0,   12,    5,    0,    0,    0,   13,    0,
        0,    0,    0,    0,   54,    0,    0,    0,    4,    3,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,  121,    2,    0,    0,    0,    0,
      133,    0,  136,  107,    0,    0,    0,    0,    0,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  108,    0,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   15,    0,    0,    0,    0,
        0,    0,  127,    5,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  114,
      122,    0,    0,   18,   19,   20,    0,    0,    0,    0,
        0,   24,    0,    0,   26,    0,  111,    0,    0,  124,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,  119,   40,  131,    0,    0,    0,    0,    0,  118,
       35,  102,   93,   91,    0,    0,    0,  120,  116,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        8,    9,    0,  104,    0,    0,    0,    0,  112,    0,
        0,    0,    0,    0,  115,    0,  109,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  137,   37,    0,   41,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   21,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
        0,   58,  132,    0,   39,    0,   34,    0,    0,    0,
        0,    0,    0,    0,    0,   23,   70,   71,   72,   56,
       57,    0,   43,    0,    0,   83,    0,    0,    0,    0,
      128,  123,    0,    0,   25,    0,   95,    0,    0,  106,
        0,    0,    0,    0,    0,    0,   68,  110,    0,   38,
        0,    0,   59,   96,   55,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   63,    0,    0,    0,  130,

        0,    0,    0,    0,   22,    0,    0,   30,    0,  105,
        0,    0,    0,    0,    0,    0,    0,   31,   25,    0,
        0,   97,    0,    0,    0,   76,   77,   78,    0,    0,
        0,    0,    0,   66,   60,   51,    0,    0,   85,   62,
       64,    0,    0,    0,   92,   90,  113,    0,   32,    0,
        0,  129,   80,    0,    0,    0,    0,   98,    0,    0,
        0,  103,    0,   79,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,    0,    0,   81,   44,   84,    0,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   67,    0,    0,   88,    0,    0,    0,    0,    0,

        0,    0,   65,    0,    0,   45,   82,   94,    0,    0,
       46,    0,  126,    0,   47,   49,   50,   48,    0,  125,
        0,   87,    0
    } ;

static mmoconst flex_int32_t mmo_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    6,    7,    8,    1,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
       19,    1,    1,    1,    1,    1,   20,   21,    8,    1,
        1,    1,   22,    1,    1,   23,   24,    1,   25,   26,
        1,   27,    1,    1,    1,    1,    1,    1,   28,    1,
        1,    1,    1,    1,   29,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,    1,   39,   40,   41,   42,
       43,   44,    1,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static mmoconst flex_int32_t mmo_meta[54] =
    {   0,
        1,    1,    1,    2,    3,    2,    4,    3,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static mmoconst flex_int16_t mmo_base[1015] =
    {   0,
        0,    0, 1376, 1377,   52,   57, 1349,   25,   32,   43,
       48,   45,   30,   54,   46,   59,   68,   74,   74,   68,
       86,   85,  119,   79,   56, 1342, 1324, 1338,  137, 1349,
     1338, 1325, 1324, 1335, 1314, 1322, 1321, 1328, 1313, 1319,
     1317,   95, 1324, 1318,   96, 1312, 1326,  127, 1313, 1321,
     1319, 1306, 1317, 1310, 1317, 1316,  104,  144, 1305, 1313,
     1296, 1300, 1294, 1298,  119, 1294, 1310, 1306, 1294, 1286,
     1298, 1293, 1297, 1290,  105,  116, 1303,  127,  110, 1291,
     1287,  133, 1298, 1282, 1297, 1277,  133, 1282, 1284,  138,
     1293, 1277,    0, 1273, 1279, 1279, 1284, 1268, 1271, 1277,

     1271, 1264, 1267, 1282, 1276, 1272, 1268, 1262, 1265, 1261,
     1272, 1268, 1264, 1254, 1254, 1259,  166, 1263, 1254, 1249,
     1255,  167, 1251, 1260,    0, 1262, 1257, 1247,  138,  142,
     1249, 1245, 1257, 1245, 1239,  182, 1255, 1250, 1252, 1240,
     1234, 1244,  175, 1243,  178,  183, 1234,  191, 1231, 1235,
      194, 1230,  171, 1235, 1243, 1232, 1238,  199,  201,  202,
      176, 1226, 1235, 1226,  180, 1221,  171, 1235, 1228, 1225,
     1215, 1220, 1219, 1212, 1224, 1223, 1225, 1212, 1205, 1221,
     1209, 1204, 1215,    0, 1202, 1204, 1213, 1217, 1210, 1213,
     1202, 1200, 1206, 1197, 1198, 1194, 1207, 1184, 1201, 1190,

     1186, 1193, 1197, 1183, 1195, 1180, 1198,    0,  183, 1188,
     1181, 1194,  211,   54, 1192, 1184,    0, 1180, 1189, 1175,
     1167, 1175, 1168,  178, 1184, 1167, 1168, 1168, 1171, 1180,
     1163, 1377, 1175, 1173,  225, 1176, 1161, 1166,  222, 1166,
     1164,  225,  228, 1170,  236, 1158, 1165,    0, 1168, 1151,
     1151, 1148, 1147, 1147, 1143,  238, 1143,    0,    0,    0,
     1145, 1145, 1154, 1143, 1152,  236,  237,  246,  247, 1147,
      249, 1139, 1138, 1139, 1141, 1150,  254, 1145, 1134,  255,
      256, 1130,  146, 1142, 1144, 1136, 1126, 1128,  243, 1126,
     1130, 1131, 1125, 1129, 1120, 1127,  228, 1126, 1116, 1120,

     1132, 1114,  244,  265, 1113, 1113, 1105, 1111, 1110, 1112,
        0,  266,  267, 1113, 1105, 1106,  260,  274, 1377,  278,
     1102, 1111, 1100, 1100, 1099,  279, 1098, 1111, 1096, 1112,
     1096, 1110, 1092, 1104, 1108, 1107, 1101, 1103,  252, 1100,
     1086, 1099, 1090, 1377,  279, 1089, 1377, 1377,  288, 1377,
     1092, 1085,    0,  290, 1092, 1093, 1082, 1089, 1093, 1078,
        0,  291, 1074,    0,    0,    0, 1081, 1071, 1072, 1086,
     1084,    0,    0,  295,    0,    0,  259, 1068,    0, 1092,
     1078, 1067, 1076, 1058,  292, 1063, 1062, 1061,    0,    0,
     1068, 1061, 1055, 1058,  299,  301, 1069, 1066,  302,  304,

      307, 1069, 1055, 1057, 1050, 1048,  308, 1054, 1048,  309,
     1050,  311, 1047, 1045,  312, 1046, 1050,  319, 1049,  318,
     1057, 1047, 1050, 1039,    0,    0, 1048,  320,  321, 1377,
      318, 1051,    0,    0, 1034, 1047, 1042,  331,  334,    0,
      338,  339,  340, 1031, 1038, 1028,  341,  342, 1034, 1038,
     1041, 1023, 1377, 1036, 1023,  296, 1034,  347,  348,  350,
     1033,    0,  351, 1034,    0, 1021, 1017, 1030,  352, 1018,
      331, 1021,    0,    0,  358, 1027,  359, 1028, 1022, 1009,
        0,    0,    0,    0,    0, 1023, 1017, 1013,    0, 1019,
     1006, 1004,  361,  364, 1377, 1016,  370, 1006,    0,    0,

     1005,  996,  999,  998,    0,    0, 1015, 1001,    0,    0,
        0, 1000,  991, 1006, 1005,  371,    0, 1004, 1005,    0,
     1007,    0,  372,  997,    0,  989,  993, 1377,  979,    0,
      336,  989,  377, 1001,    0,    0,  380,  375,    0, 1016,
     1010,  986,    0,    0,  384,  997,  388,  383,    0,    0,
        0,  395,    0,  987,  991,  985,  399,    0,  980,  981,
      972,  983,  987,  393,  394,  396,  397,  410,    0,    0,
        0,  413,    0,    0,  983,    0,  414,  987,  972,    0,
      415,  980,  979,  963,  963,    0,  410,  418,  414,  421,
      980,  973,    0,    0,  422,  962,  423,  975,  960,  424,

      435,    0,  959,    0,  968,  959,  396,  431,  432,    0,
        0,  972,  434,    0,    0,    0,  969,  966,  435,  448,
        0,    0,  451,  452,    0,  952,    0,    0,  952,    0,
      952,  962,  961,    0,  959,  945,  956,  448,  946,  950,
        0, 1377,    0, 1377,  976,  947,    0,  947,  451, 1377,
        0,    0, 1377,    0,  940,  951,  941, 1377,    0,  460,
      935,  946,  461,  933,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  462,    0,  934,  932,    0,    0,
      938,  930,  942,  934, 1377,    0, 1377,  421,  927,  464,
        0,  932,    0,  929,  465,  463, 1377,    0,  927,    0,

      925,  922,  470,  471,  472,    0,  483,  923,    0,  933,
      921,    0,  490,    0,    0,  468,  935,    0,  923,  484,
      498,  500,  928,  917,  501, 1377,  919,  923,  913,  925,
      919,    0, 1377,  912,    0,  912, 1377,  502,  503,  504,
        0,  922,  505,  501,  917,    0,    0,    0,    0,    0,
        0,    0,    0,  914,  508,    0,  509,  914,  918,  915,
        0, 1377,  914,  505,    0,  512,    0,  906,    0, 1377,
      916,  911,  514,    0,    0,    0,    0, 1377,  899,    0,
      521,  914,    0, 1377,    0, 1377,  896,  912,  520,    0,
        0,  894,  904,  527,  906, 1377,  903,  902,  889, 1377,

      891,    0,    0,    0,    0,  886,  532, 1377,  531,    0,
      879,    0,    0,  888,  535,  539,  540, 1377,    0,    0,
      886,    0,  541,  883,  537,    0,    0,    0,  898,    0,
      880,  887,  890, 1377,    0,    0,  839,  796,  546, 1377,
     1377,  792,  765,  762,    0,    0,    0,  545, 1377,  552,
      746,    0,    0,  582,    0,    0,  556,    0,  559,    0,
      568, 1377,  561,    0,  543,  506,  483,  439,  448,  567,
      349,  341,  563, 1377,  570,  571,    0,    0, 1377,  567,
        0,  575,  273,  279,  576,  227,  577,  186,    0,  578,
      579, 1377,    0,  582, 1377,    0,  580,  581,    0,  175,

        0,  583,    0,  594,  596,    0, 1377,    0,  598,  600,
        0,  117,    0,    0, 1377, 1377, 1377, 1377,  597,    0,
      602, 1377, 1377,  614,  618,  622,  626,  628,  630,  632,
      634,  636,  638,  640,  128,  642,  646,  650,  654,  658,
      662,  666,  670,  674,  678,  680,  682,  684,  688,  692,
      696,  700,  704,  708,  710,  714,  718,  722,  726,  730,
      734,  738,  108,  742,  746,  750,  754,  756,  760,  764,
      768,  772,  778,  782,  786,  790,  794,  798,  804,  810,
      814,  816,  818,   91,  821,  825,  829,  835,  841,  845,
      849,  851,  853,  857,  861,  865,  871,  873,  875,  877,

      881,  883,  887,  890,  894,  896,  900,  902,  904,  906,
      908,  910,  914,  918
    } ;

static mmoconst flex_int16_t mmo_def[1015] =
    {   0,
      923,    1,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  924,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  925,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  924,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  926,  923,  923,
      923,  923,  923,  923,  923,  923,  925,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  927,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  928,  929,  930,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      926,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  927,  923,  923,  923,  923,  923,  923,  923,
      931,  923,  923,  928,  929,  930,  923,  923,  923,  923,
      923,  932,  933,  923,  934,  935,  923,  923,  936,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  937,  938,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  939,  940,  923,  923,  923,  923,
      923,  923,  941,  942,  923,  923,  923,  923,  923,  943,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  944,  923,  923,  945,  923,  923,  923,  923,  923,
      923,  923,  931,  946,  923,  923,  923,  923,  923,  923,
      932,  933,  947,  934,  948,  923,  923,  923,  936,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  937,  938,

      923,  923,  923,  923,  949,  950,  923,  923,  951,  952,
      953,  923,  923,  923,  923,  923,  954,  923,  923,  955,
      923,  956,  923,  923,  957,  923,  923,  923,  923,  958,
      923,  923,  923,  923,  939,  940,  923,  923,  959,  923,
      923,  923,  941,  942,  923,  923,  923,  923,  960,  943,
      961,  923,  962,  923,  923,  923,  923,  963,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  964,  965,
      966,  923,  944,  967,  923,  945,  923,  923,  923,  968,
      923,  923,  923,  923,  923,  946,  923,  923,  923,  923,
      923,  923,  947,  948,  923,  923,  923,  923,  923,  923,

      923,  969,  923,  970,  923,  923,  923,  923,  923,  949,
      950,  923,  923,  951,  952,  953,  923,  923,  923,  923,
      971,  954,  923,  923,  955,  923,  956,  972,  923,  957,
      923,  923,  923,  958,  923,  923,  923,  923,  923,  923,
      973,  923,  959,  923,  923,  923,  974,  923,  923,  923,
      960,  961,  923,  962,  923,  923,  923,  923,  963,  923,
      923,  923,  923,  923,  975,  976,  977,  978,  979,  964,
      965,  966,  980,  967,  923,  981,  923,  923,  968,  982,
      923,  923,  923,  923,  923,  983,  923,  923,  923,  923,
      984,  923,  985,  923,  923,  923,  923,  969,  923,  970,

      923,  923,  923,  923,  923,  986,  923,  923,  987,  923,
      923,  988,  923,  971,  989,  923,  923,  972,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  973,  923,  923,  974,  923,  923,  923,  923,  923,
      990,  923,  923,  923,  923,  975,  976,  977,  978,  979,
      980,  991,  981,  923,  923,  982,  923,  923,  923,  923,
      983,  923,  923,  923,  992,  923,  985,  923,  993,  923,
      923,  923,  923,  994,  995,  996,  986,  923,  923,  987,
      923,  923,  988,  923,  989,  923,  923,  923,  923,  997,
      998,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  999, 1000, 1001,  990,  923,  923,  923,  923,  991,
      923, 1002, 1003,  923,  923,  923,  923,  923,  992, 1004,
      923,  993,  923,  923,  923,  994,  995,  996,  923, 1005,
      923,  923,  923,  923,  997,  998,  923,  923,  923,  923,
      923,  923,  923,  923,  999, 1000, 1001,  923,  923,  923,
      923, 1002, 1003,  923, 1006, 1007,  923, 1004,  923, 1008,
      923,  923,  923, 1005,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923, 1006, 1007,  923,  923,
     1008,  923,  923,  923,  923,  923,  923,  923, 1009,  923,
      923,  923, 1010,  923,  923, 1011,  923,  923, 1012,  923,

     1013,  923, 1009,  923,  923, 1010,  923, 1011,  923,  923,
     1012,  923, 1013, 1014,  923,  923,  923,  923,  923, 1014,
      923,  923,    0,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923
    } ;

static mmoconst flex_int16_t mmo_nxt[1431] =
    {   0,
        4,    5,    6,    5,    4,    5,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    7,    4,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,    4,
       18,   19,    4,   20,   21,   22,   23,   24,   25,   26,
       27,    4,   28,   29,   29,   29,   31,   29,   29,   29,
       29,   53,   29,   36,   32,  319,  319,   54,   33,   34,
       35,   37,   39,   50,   55,   56,   40,   62,   43,   38,
       68,   44,   41,   57,   58,   45,   51,   59,   52,   99,
       42,   46,   47,   63,   48,  100,  765,   69,   60,   49,

       64,   61,   65,   70,   66,   73,   71,   67,   74,   75,
       80,   72,   81,  659,   86,   82,   87,   76,   77,   78,
       79,   83,   93,   84,   97,   88,   98,   89,   90,  121,
      125,   91,   92,  485,  116,   85,  122,   93,   29,   29,
       29,  117,   29,  118,  134,  125,  161,  136,   94,  146,
      919,  135,   95,  166,  137,  158,  159,  160,  164,  167,
      162,   96,  136,  147,  148,  170,  176,  180,  165,  208,
      214,  221,  138,  224,  177,  222,  392,  393,  239,  171,
      223,  242,  181,  225,  208,  214,  243,  226,  394,  139,
      232,  232,  232,  239,  245,  232,  242,  248,  232,  250,

      251,  243,  258,  240,  259,  260,  912,  209,  252,  245,
      267,  261,  248,  312,  317,  270,  253,  258,  262,  259,
      260,  271,  328,  268,  263,  329,  313,  902,  339,  317,
      344,  344,  344,  347,  347,  347,  348,  348,  348,  372,
      373,  361,  318,  339,  350,  350,  350,  350,  362,  375,
      376,  400,  379,  340,  372,  373,  361,  385,  389,  390,
      453,  453,  409,  416,  375,  376,  374,  379,  418,  425,
      426,  900,  385,  389,  390,  377,  410,  433,  417,  430,
      401,  434,  440,  418,  425,  426,  431,  432,  458,  459,
      460,  462,  433,  465,  474,  386,  434,  440,  483,  486,

      495,  495,  505,  487,  506,  509,  462,  510,  465,  474,
      511,  517,  520,  483,  522,  525,  898,  505,  897,  506,
      509,  530,  510,  538,  539,  511,  517,  520,  528,  522,
      525,  466,  528,  528,  548,  540,  530,  549,  538,  539,
      541,  551,  552,  553,  557,  558,  565,  566,  567,  548,
      569,  570,  549,  571,  574,  580,  551,  552,  553,  557,
      558,  587,  589,  582,  601,  569,  570,  602,  571,  574,
      580,  583,  584,  604,  621,  628,  587,  589,  635,  601,
      638,  636,  602,  641,  642,  642,  891,  647,  604,  621,
      628,  649,  650,  650,  890,  638,  665,  666,  641,  667,

      668,  639,  647,  653,  653,  653,  649,  658,  658,  658,
      658,  665,  666,  669,  667,  668,  673,  676,  680,  685,
      685,  686,  687,  687,  688,  691,  693,  696,  669,  762,
      762,  673,  676,  680,  706,  707,  686,  709,  712,  688,
      691,  693,  696,  697,  697,  697,  703,  704,  705,  706,
      707,  713,  709,  712,  715,  716,  726,  726,  726,  737,
      737,  737,  737,  741,  744,  752,  713,  764,  769,  715,
      716,  770,  770,  774,  775,  776,  786,  786,  741,  744,
      752,  888,  764,  769,  727,  887,  728,  789,  774,  775,
      776,  729,  778,  778,  778,  778,  778,  778,  784,  784,

      784,  790,  789,  791,  794,  802,  803,  804,  807,  808,
      808,  812,  813,  818,  818,  820,  790,  825,  791,  794,
      802,  803,  804,  807,  830,  886,  812,  813,  834,  834,
      820,  839,  825,  839,  850,  839,  839,  839,  855,  830,
      849,  849,  856,  857,  860,  862,  862,  862,  873,  850,
      839,  885,  839,  855,  839,  839,  839,  856,  857,  860,
      874,  874,  880,  873,  879,  879,  879,  879,  879,  879,
      889,  892,  892,  893,  894,  895,  895,  880,  896,  899,
      901,  904,  905,  909,  910,  889,  914,  884,  893,  894,
      907,  907,  907,  896,  899,  901,  904,  905,  909,  910,

      921,  914,  915,  915,  916,  916,  917,  917,  918,  918,
      922,  922,  883,  882,  876,  921,  184,  184,  184,  184,
      217,  217,  217,  217,  311,  311,  311,  311,  353,  353,
      353,  353,  364,  364,  365,  365,  366,  366,  473,  473,
      481,  481,  482,  482,  484,  484,  489,  489,  499,  499,
      499,  499,  500,  500,  500,  500,  535,  535,  535,  535,
      536,  536,  536,  536,  543,  543,  543,  543,  544,  544,
      544,  544,  550,  550,  550,  550,  573,  573,  573,  573,
      576,  576,  576,  576,  586,  586,  593,  593,  594,  594,
      610,  610,  610,  610,  611,  611,  611,  611,  614,  614,

      614,  614,  615,  615,  615,  615,  616,  616,  616,  616,
      622,  622,  622,  622,  625,  625,  627,  627,  627,  627,
      630,  630,  630,  630,  634,  634,  634,  634,  643,  643,
      643,  643,  651,  651,  651,  651,  652,  652,  652,  652,
      654,  654,  654,  654,  670,  670,  670,  670,  671,  671,
      671,  671,  672,  672,  672,  672,  674,  674,  674,  674,
      679,  679,  698,  698,  698,  698,  700,  700,  700,  700,
      714,  714,  714,  714,  718,  718,  718,  718,  732,  875,
      732,  732,  732,  732,  735,  735,  735,  735,  746,  746,
      746,  746,  747,  747,  747,  747,  748,  748,  748,  748,

      749,  749,  749,  749,  750,  872,  750,  750,  750,  750,
      751,  871,  751,  751,  751,  751,  753,  753,  753,  753,
      756,  756,  761,  761,  767,  767,  767,  777,  777,  777,
      777,  780,  780,  780,  780,  783,  870,  783,  783,  783,
      783,  785,  869,  785,  785,  785,  785,  805,  805,  805,
      805,  810,  810,  810,  810,  819,  819,  822,  822,  826,
      826,  826,  826,  827,  827,  827,  827,  828,  828,  828,
      828,  835,  868,  835,  835,  835,  835,  836,  836,  845,
      845,  846,  846,  847,  847,  847,  847,  852,  852,  853,
      853,  853,  853,  858,  858,  858,  864,  864,  864,  864,

      877,  877,  878,  878,  878,  878,  881,  881,  903,  903,
      906,  906,  908,  908,  911,  911,  913,  913,  913,  913,
      920,  920,  920,  920,  867,  866,  865,  863,  861,  859,
      854,  851,  848,  844,  843,  842,  841,  840,  838,  837,
      833,  832,  831,  829,  824,  823,  821,  817,  816,  815,
      814,  811,  809,  806,  801,  800,  799,  798,  797,  796,
      795,  793,  792,  788,  787,  782,  781,  779,  773,  772,
      771,  768,  766,  763,  760,  759,  758,  757,  755,  754,
      745,  743,  742,  740,  739,  738,  736,  734,  733,  731,
      730,  725,  724,  723,  722,  721,  720,  719,  717,  711,

      710,  708,  702,  701,  699,  695,  694,  692,  690,  689,
      684,  683,  682,  681,  678,  677,  675,  664,  663,  662,
      661,  660,  657,  656,  655,  648,  646,  645,  644,  640,
      637,  633,  632,  631,  629,  626,  624,  623,  620,  619,
      618,  617,  613,  612,  609,  608,  607,  606,  605,  603,
      600,  599,  598,  597,  596,  595,  592,  591,  590,  588,
      585,  581,  579,  578,  577,  575,  572,  568,  564,  563,
      562,  561,  560,  559,  556,  555,  554,  547,  546,  545,
      542,  537,  534,  533,  532,  531,  529,  527,  526,  524,
      523,  521,  519,  518,  516,  515,  514,  513,  512,  508,

      507,  504,  503,  502,  501,  498,  497,  496,  494,  493,
      492,  491,  490,  488,  480,  479,  478,  477,  476,  475,
      472,  471,  470,  469,  468,  467,  464,  463,  461,  457,
      456,  455,  454,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  439,  438,  437,  436,  435,
      429,  428,  427,  424,  423,  422,  421,  420,  419,  415,
      414,  413,  412,  411,  408,  407,  406,  405,  404,  403,
      402,  399,  398,  397,  396,  395,  391,  388,  387,  384,
      383,  382,  381,  380,  378,  371,  370,  369,  368,  367,
      363,  360,  359,  358,  357,  356,  355,  354,  352,  351,

      349,  346,  345,  343,  342,  341,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  327,  326,  325,  324,  323,
      322,  321,  320,  316,  315,  314,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  269,  266,  265,  264,  257,
      256,  255,  254,  249,  247,  246,  244,  241,  238,  237,
      236,  235,  234,  233,  231,  230,  229,  228,  227,  220,
      219,  218,  216,  215,  213,  212,  211,  210,  207,  206,

      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  183,  182,  179,  178,  175,  174,  173,  172,  169,
      168,  163,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  145,  144,  143,  142,  141,  140,  133,  132,  131,
      130,  129,  128,  127,  126,  124,  123,  120,  119,  115,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,  101,   30,  923,    3,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923
    } ;

static mmoconst flex_int16_t mmo_chk[1431] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    8,    5,    6,    6,
        6,   13,    6,    9,    8,  214,  214,   13,    8,    8,
        8,    9,   10,   12,   13,   13,   10,   15,   11,    9,
       17,   11,   10,   14,   14,   11,   12,   14,   12,   25,
       10,   11,   11,   15,   11,   25,  984,   17,   14,   11,

       16,   14,   16,   18,   16,   19,   18,   16,   19,   19,
       20,   18,   20,  963,   22,   21,   22,   19,   19,   19,
       19,   21,   23,   21,   24,   22,   24,   22,   22,   45,
       48,   22,   22,  935,   42,   21,   45,   23,   29,   29,
       29,   42,   29,   42,   57,   48,   76,   58,   23,   65,
      912,   57,   23,   79,   58,   75,   75,   75,   78,   79,
       76,   23,   58,   65,   65,   82,   87,   90,   78,  117,
      122,  129,   58,  130,   87,  129,  283,  283,  143,   82,
      129,  145,   90,  130,  117,  122,  146,  130,  283,   58,
      136,  136,  136,  143,  148,  136,  145,  151,  136,  153,

      153,  146,  158,  143,  159,  160,  900,  117,  153,  148,
      165,  161,  151,  209,  213,  167,  153,  158,  161,  159,
      160,  167,  224,  165,  161,  224,  209,  888,  235,  213,
      239,  239,  239,  242,  242,  242,  243,  243,  243,  266,
      267,  256,  213,  235,  245,  245,  245,  245,  256,  268,
      269,  289,  271,  235,  266,  267,  256,  277,  280,  281,
      339,  339,  297,  303,  268,  269,  267,  271,  304,  312,
      313,  886,  277,  280,  281,  269,  297,  318,  303,  317,
      289,  320,  326,  304,  312,  313,  317,  317,  345,  345,
      345,  349,  318,  354,  362,  277,  320,  326,  374,  377,

      385,  385,  395,  377,  396,  399,  349,  400,  354,  362,
      401,  407,  410,  374,  412,  415,  884,  395,  883,  396,
      399,  420,  400,  428,  429,  401,  407,  410,  418,  412,
      415,  354,  418,  418,  438,  431,  420,  439,  428,  429,
      431,  441,  442,  443,  447,  448,  456,  456,  456,  438,
      458,  459,  439,  460,  463,  469,  441,  442,  443,  447,
      448,  475,  477,  471,  493,  458,  459,  494,  460,  463,
      469,  471,  471,  497,  516,  523,  475,  477,  531,  493,
      533,  531,  494,  537,  538,  538,  872,  545,  497,  516,
      523,  547,  548,  548,  871,  533,  564,  565,  537,  566,

      567,  533,  545,  552,  552,  552,  547,  557,  557,  557,
      557,  564,  565,  568,  566,  567,  572,  577,  581,  587,
      587,  588,  589,  589,  590,  595,  597,  600,  568,  688,
      688,  572,  577,  581,  608,  609,  588,  613,  619,  590,
      595,  597,  600,  601,  601,  601,  607,  607,  607,  608,
      609,  620,  613,  619,  623,  624,  638,  638,  638,  649,
      649,  649,  649,  660,  663,  675,  620,  690,  695,  623,
      624,  696,  696,  703,  704,  705,  716,  716,  660,  663,
      675,  869,  690,  695,  638,  868,  638,  720,  703,  704,
      705,  638,  707,  707,  707,  707,  707,  707,  713,  713,

      713,  721,  720,  722,  725,  738,  739,  740,  743,  744,
      744,  755,  757,  764,  764,  766,  721,  773,  722,  725,
      738,  739,  740,  743,  781,  867,  755,  757,  789,  789,
      766,  794,  773,  794,  809,  794,  794,  794,  815,  781,
      807,  807,  816,  817,  823,  825,  825,  825,  848,  809,
      839,  866,  839,  815,  839,  839,  839,  816,  817,  823,
      850,  850,  859,  848,  857,  857,  857,  857,  857,  857,
      870,  873,  873,  875,  876,  880,  880,  859,  882,  885,
      887,  890,  891,  897,  898,  870,  902,  865,  875,  876,
      894,  894,  894,  882,  885,  887,  890,  891,  897,  898,

      919,  902,  904,  904,  905,  905,  909,  909,  910,  910,
      921,  921,  863,  861,  854,  919,  924,  924,  924,  924,
      925,  925,  925,  925,  926,  926,  926,  926,  927,  927,
      927,  927,  928,  928,  929,  929,  930,  930,  931,  931,
      932,  932,  933,  933,  934,  934,  936,  936,  937,  937,
      937,  937,  938,  938,  938,  938,  939,  939,  939,  939,
      940,  940,  940,  940,  941,  941,  941,  941,  942,  942,
      942,  942,  943,  943,  943,  943,  944,  944,  944,  944,
      945,  945,  945,  945,  946,  946,  947,  947,  948,  948,
      949,  949,  949,  949,  950,  950,  950,  950,  951,  951,

      951,  951,  952,  952,  952,  952,  953,  953,  953,  953,
      954,  954,  954,  954,  955,  955,  956,  956,  956,  956,
      957,  957,  957,  957,  958,  958,  958,  958,  959,  959,
      959,  959,  960,  960,  960,  960,  961,  961,  961,  961,
      962,  962,  962,  962,  964,  964,  964,  964,  965,  965,
      965,  965,  966,  966,  966,  966,  967,  967,  967,  967,
      968,  968,  969,  969,  969,  969,  970,  970,  970,  970,
      971,  971,  971,  971,  972,  972,  972,  972,  973,  851,
      973,  973,  973,  973,  974,  974,  974,  974,  975,  975,
      975,  975,  976,  976,  976,  976,  977,  977,  977,  977,

      978,  978,  978,  978,  979,  844,  979,  979,  979,  979,
      980,  843,  980,  980,  980,  980,  981,  981,  981,  981,
      982,  982,  983,  983,  985,  985,  985,  986,  986,  986,
      986,  987,  987,  987,  987,  988,  842,  988,  988,  988,
      988,  989,  838,  989,  989,  989,  989,  990,  990,  990,
      990,  991,  991,  991,  991,  992,  992,  993,  993,  994,
      994,  994,  994,  995,  995,  995,  995,  996,  996,  996,
      996,  997,  837,  997,  997,  997,  997,  998,  998,  999,
      999, 1000, 1000, 1001, 1001, 1001, 1001, 1002, 1002, 1003,
     1003, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1005, 1005,

     1006, 1006, 1007, 1007, 1007, 1007, 1008, 1008, 1009, 1009,
     1010, 1010, 1011, 1011, 1012, 1012, 1013, 1013, 1013, 1013,
     1014, 1014, 1014, 1014,  833,  832,  831,  829,  824,  821,
      814,  811,  806,  801,  799,  798,  797,  795,  793,  792,
      788,  787,  782,  779,  772,  771,  768,  763,  760,  759,
      758,  754,  745,  742,  736,  734,  731,  730,  729,  728,
      727,  724,  723,  719,  717,  711,  710,  708,  702,  701,
      699,  694,  692,  689,  684,  683,  682,  681,  678,  677,
      664,  662,  661,  657,  656,  655,  648,  646,  645,  640,
      639,  637,  636,  635,  633,  632,  631,  629,  626,  618,

      617,  612,  606,  605,  603,  599,  598,  596,  592,  591,
      585,  584,  583,  582,  579,  578,  575,  563,  562,  561,
      560,  559,  556,  555,  554,  546,  542,  541,  540,  534,
      532,  529,  527,  526,  524,  521,  519,  518,  515,  514,
      513,  512,  508,  507,  504,  503,  502,  501,  498,  496,
      492,  491,  490,  488,  487,  486,  480,  479,  478,  476,
      472,  470,  468,  467,  466,  464,  461,  457,  455,  454,
      452,  451,  450,  449,  446,  445,  444,  437,  436,  435,
      432,  427,  424,  423,  422,  421,  419,  417,  416,  414,
      413,  411,  409,  408,  406,  405,  404,  403,  402,  398,

      397,  394,  393,  392,  391,  388,  387,  386,  384,  383,
      382,  381,  380,  378,  371,  370,  369,  368,  367,  363,
      360,  359,  358,  357,  356,  355,  352,  351,  346,  343,
      342,  341,  340,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  325,  324,  323,  322,  321,
      316,  315,  314,  310,  309,  308,  307,  306,  305,  302,
      301,  300,  299,  298,  296,  295,  294,  293,  292,  291,
      290,  288,  287,  286,  285,  284,  282,  279,  278,  276,
      275,  274,  273,  272,  270,  265,  264,  263,  262,  261,
      257,  255,  254,  253,  252,  251,  250,  249,  247,  246,

      244,  241,  240,  238,  237,  236,  234,  233,  231,  230,
      229,  228,  227,  226,  225,  223,  222,  221,  220,  219,
      218,  216,  215,  212,  211,  210,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  166,  164,  163,  162,  157,
      156,  155,  154,  152,  150,  149,  147,  144,  142,  141,
      140,  139,  138,  137,  135,  134,  133,  132,  131,  128,
      127,  126,  124,  123,  121,  120,  119,  118,  116,  115,

      114,  113,  112,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   97,   96,   95,
       94,   92,   91,   89,   88,   86,   85,   84,   83,   81,
       80,   77,   74,   73,   72,   71,   70,   69,   68,   67,
       66,   64,   63,   62,   61,   60,   59,   56,   55,   54,
       53,   52,   51,   50,   49,   47,   46,   44,   43,   41,
       40,   39,   38,   37,   36,   35,   34,   33,   32,   31,
       30,   28,   27,   26,    7,    3,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923
    } ;

static mmo_state_type mmo_last_accepting_state;
static char *mmo_last_accepting_cpos;

extern int mmo_flex_debug;
int mmo_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define mmomore() mmomore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *mmotext;
#line 1 "mm_options.l"
#line 2 "mm_options.l"
extern int mytaskid;

#ifdef flex

#undef YY_INPUT
#define YY_INPUT(b, r, ms) (r = mmo_mmoinput(b, ms))

#else

#undef input
#undef unput
#define input() (*gopts++)
#define unput(c) (*--gopts = c)

#endif

#undef ECHO
#define ECHO mmoout=nabout;if(mytaskid==0) fprintf(mmoout, "\tmm_options:  %s\n",mmotext)

#line 1118 "<nabout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int mmo_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mmolex_destroy (void );

int mmoget_debug (void );

void mmoset_debug (int debug_flag  );

YY_EXTRA_TYPE mmoget_extra (void );

void mmoset_extra (YY_EXTRA_TYPE user_defined  );

FILE *mmoget_in (void );

void mmoset_in  (FILE * in_str  );

FILE *mmoget_out (void );

void mmoset_out  (FILE * out_str  );

int mmoget_leng (void );

char *mmoget_text (void );

int mmoget_lineno (void );

void mmoset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mmowrap (void );
#else
extern int mmowrap (void );
#endif
#endif

    static void mmounput (int c,char *buf_ptr  );
    
#ifndef mmotext_ptr
static void mmo_flex_strncpy (char *,mmoconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int mmo_flex_strlen (mmoconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int mmoinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( mmotext, mmoleng, 1, mmoout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->mmo_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mmoin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mmoin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, mmoin))==0 && ferror(mmoin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(mmoin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "mmoterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef mmoterminate
#define mmoterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) mmo_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mmolex (void);

#define YY_DECL int mmolex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after mmotext and mmoleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register mmo_state_type mmo_current_state;
	register char *mmo_cp, *mmo_bp;
	register int mmo_act;
    
#line 22 "mm_options.l"


#line 1308 "<nabout>"

	if ( !(mmo_init) )
		{
		(mmo_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (mmo_start) )
			(mmo_start) = 1;	/* first start state */

		if ( ! mmoin )
			mmoin = stdin;

		if ( ! mmoout )
			mmoout = nabout;

		if ( ! YY_CURRENT_BUFFER ) {
			mmoensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				mmo_create_buffer(mmoin,YY_BUF_SIZE );
		}

		mmo_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		mmo_cp = (mmo_c_buf_p);

		/* Support of mmotext. */
		*mmo_cp = (mmo_hold_char);

		/* mmo_bp points to the position in mmo_ch_buf of the start of
		 * the current run.
		 */
		mmo_bp = mmo_cp;

		mmo_current_state = (mmo_start);
mmo_match:
		do
			{
			register YY_CHAR mmo_c = mmo_ec[YY_SC_TO_UI(*mmo_cp)];
			if ( mmo_accept[mmo_current_state] )
				{
				(mmo_last_accepting_state) = mmo_current_state;
				(mmo_last_accepting_cpos) = mmo_cp;
				}
			while ( mmo_chk[mmo_base[mmo_current_state] + mmo_c] != mmo_current_state )
				{
				mmo_current_state = (int) mmo_def[mmo_current_state];
				if ( mmo_current_state >= 924 )
					mmo_c = mmo_meta[(unsigned int) mmo_c];
				}
			mmo_current_state = mmo_nxt[mmo_base[mmo_current_state] + (unsigned int) mmo_c];
			++mmo_cp;
			}
		while ( mmo_base[mmo_current_state] != 1377 );

mmo_find_action:
		mmo_act = mmo_accept[mmo_current_state];
		if ( mmo_act == 0 )
			{ /* have to back up */
			mmo_cp = (mmo_last_accepting_cpos);
			mmo_current_state = (mmo_last_accepting_state);
			mmo_act = mmo_accept[mmo_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( mmo_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*mmo_cp = (mmo_hold_char);
			mmo_cp = (mmo_last_accepting_cpos);
			mmo_current_state = (mmo_last_accepting_state);
			goto mmo_find_action;

case 1:
YY_RULE_SETUP
#line 24 "mm_options.l"
{ ECHO; cut  = atof( &mmotext[4] ); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 25 "mm_options.l"
{ ECHO; cutnp  = atof( &mmotext[6] ); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 26 "mm_options.l"
{ ECHO; scnb = atof( &mmotext[5] ); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 27 "mm_options.l"
{ ECHO; scee = atof( &mmotext[5] ); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 28 "mm_options.l"
{ ECHO; ntpr = atoi(&mmotext[5]); 
                                    if( ntpr==0) ntpr = 9999999; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 30 "mm_options.l"
{ ECHO; hcp = atoi( &mmotext[4] ); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 31 "mm_options.l"
{ ECHO; hcp_h1 = atof( &mmotext[7] ); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 32 "mm_options.l"
{ ECHO; hcp_h2 = atof( &mmotext[7] ); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 33 "mm_options.l"
{ ECHO; hcp_h3 = atof( &mmotext[7] ); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 35 "mm_options.l"
{ ECHO; nscm = atoi( &mmotext[5] ); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 36 "mm_options.l"
{ ECHO; nsnb = atoi( &mmotext[5] ); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 37 "mm_options.l"
{ ECHO; nsnp = atoi( &mmotext[5] ); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 38 "mm_options.l"
{ ECHO; ntwx = atoi( &mmotext[5] ); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 39 "mm_options.l"
{ ECHO; nchk = atoi( &mmotext[5] ); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 40 "mm_options.l"
{ ECHO; nchk2 = atoi( &mmotext[6] ); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "mm_options.l"
{ ECHO; dt  = atof( &mmotext[3] ); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "mm_options.l"
{ ECHO; t = atof( &mmotext[2] ); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "mm_options.l"
{ ECHO; tautp = atof( &mmotext[6] ); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "mm_options.l"
{ ECHO; temp0 = atof( &mmotext[6] ); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "mm_options.l"
{ ECHO; tempi = atof( &mmotext[6] ); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "mm_options.l"
{ ECHO; vlimit = atof( &mmotext[7] ); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "mm_options.l"
{ ECHO; gamma_ln = atof( &mmotext[9] ); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "mm_options.l"
{ ECHO; genmass = atof( &mmotext[8] ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "mm_options.l"
{ ECHO; wcons = atof( &mmotext[6] ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "mm_options.l"
{ ECHO; ntpr_md = atoi(&mmotext[8]); 
                                    if( ntpr_md==0) ntpr_md = 9999999; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 53 "mm_options.l"
{ ECHO; zerov = atoi( &mmotext[6] ); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 54 "mm_options.l"
{ ECHO; k4d  = atof( &mmotext[4] ); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 56 "mm_options.l"
{ ECHO; ips = atoi( &mmotext[4] ); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "mm_options.l"
{ ECHO; gb = atoi( &mmotext[3] ); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "mm_options.l"
{ ECHO; gb_debug = atoi( &mmotext[9] ); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "mm_options.l"
{ ECHO; nr_debug = atoi( &mmotext[9] ); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "mm_options.l"
{ ECHO; gb2_debug = atoi( &mmotext[10] ); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "mm_options.l"
{ ECHO; gbsa_debug = atoi( &mmotext[11] ); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "mm_options.l"
{ ECHO; e_debug = atoi( &mmotext[8] ); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "mm_options.l"
{ ECHO; epsext = atof( &mmotext[7] ); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "mm_options.l"
{ ECHO; kappa = atof( &mmotext[6] ); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "mm_options.l"
{ ECHO; rgbmax = atof( &mmotext[7] ); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 68 "mm_options.l"
{ ECHO; surften = atof( &mmotext[8] ); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 69 "mm_options.l"
{ ECHO; dradius = atof( &mmotext[8] ); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 70 "mm_options.l"
{ ECHO; deltar = atof( &mmotext[7] ); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 71 "mm_options.l"
{ ECHO; rwater = atof( &mmotext[7] ); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 72 "mm_options.l"
{ ECHO; alphanp= atof( &mmotext[8] ); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 73 "mm_options.l"
{ ECHO; kappanp = atof( &mmotext[8] ); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 74 "mm_options.l"
{ ECHO; min_volume  = atof( &mmotext[11] ); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 75 "mm_options.l"
{ ECHO; max_set_size = atoi( &mmotext[13] ); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 76 "mm_options.l"
{ ECHO; MPI_min_tasks = atoi( &mmotext[14] ); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 77 "mm_options.l"
{ ECHO; cull_np_lists = atoi( &mmotext[14] ); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 78 "mm_options.l"
{ ECHO; use_lower_tri = atoi( &mmotext[14] ); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 79 "mm_options.l"
{ ECHO; dynamic_loops = atoi( &mmotext[14] ); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 80 "mm_options.l"
{ ECHO; static_arrays = atoi( &mmotext[14] ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 81 "mm_options.l"
{ ECHO; blocksize = atoi( &mmotext[10] ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 82 "mm_options.l"
{ ECHO; gbsa = atoi( &mmotext[5] ); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 83 "mm_options.l"
{ ECHO; dim = atoi( &mmotext[4] ); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 85 "mm_options.l"
{ ECHO; rismData.rism = atoi( &mmotext[5] ); }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 86 "mm_options.l"
{ ECHO; xvvfile = strdup( &mmotext[8] ); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 87 "mm_options.l"
{ ECHO; guvfile = strdup( &mmotext[8] ); }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 88 "mm_options.l"
{ ECHO; huvfile = strdup( &mmotext[8] ); }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 89 "mm_options.l"
{ ECHO; cuvfile = strdup( &mmotext[8] ); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 90 "mm_options.l"
{ ECHO; uuvfile = strdup( &mmotext[8] ); }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 91 "mm_options.l"
{ ECHO; asympfile = strdup( &mmotext[10] ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 92 "mm_options.l"
{ ECHO; rismData.closure = atoi( &mmotext[8] ); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 93 "mm_options.l"
{ ECHO; rismData.closure = 0; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 94 "mm_options.l"
{ ECHO; rismData.closure = 1; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 95 "mm_options.l"
{ ECHO; rismData.closure = 2; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 96 "mm_options.l"
{ ECHO; rismData.closureOrder = atoi( &mmotext[13] ); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 97 "mm_options.l"
{ ECHO; rismData.asympCorr = atoi( &mmotext[10] ); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 98 "mm_options.l"
{ ECHO; rismData.gauss_fluct = atoi( &mmotext[11] ); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 99 "mm_options.l"
{ ECHO; rismData.solvcut = atof( &mmotext[8] ); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 100 "mm_options.l"
{ ECHO; rismData.buffer = atof( &mmotext[7] ); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 101 "mm_options.l"
{ ECHO; rismData.grdspc[0] = atof( &mmotext[8] ); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 102 "mm_options.l"
{ ECHO; rismData.grdspc[1] = atof( &mmotext[8] ); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 103 "mm_options.l"
{ ECHO; rismData.grdspc[2] = atof( &mmotext[8] ); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 104 "mm_options.l"
{ ECHO; rismData.ng3[0] = atoi( &mmotext[4] ); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 105 "mm_options.l"
{ ECHO; rismData.ng3[1] = atoi( &mmotext[4] ); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 106 "mm_options.l"
{ ECHO; rismData.ng3[2] = atoi( &mmotext[4] ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 107 "mm_options.l"
{ ECHO; rismData.solvbox[0] = atof( &mmotext[9] ); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 108 "mm_options.l"
{ ECHO; rismData.solvbox[1] = atof( &mmotext[9] ); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 109 "mm_options.l"
{ ECHO; rismData.solvbox[2] = atof( &mmotext[9] ); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 110 "mm_options.l"
{ ECHO; rismData.tolerance = atof( &mmotext[10] ); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 111 "mm_options.l"
{ ECHO; rismData.mdiis_del = atof( &mmotext[10] ); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 112 "mm_options.l"
{ ECHO; rismData.mdiis_nvec = atoi( &mmotext[11] ); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 113 "mm_options.l"
{ ECHO; rismData.mdiis_method = atoi( &mmotext[13] ); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 114 "mm_options.l"
{ ECHO; rismData.maxstep = atoi( &mmotext[8] ); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 115 "mm_options.l"
{ ECHO; rismData.npropagate = atoi( &mmotext[11] ); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 116 "mm_options.l"
{ ECHO; rismData.centering = atoi( &mmotext[10] ); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 117 "mm_options.l"
{ ECHO; rismData.zerofrc = atoi( &mmotext[8] ); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 118 "mm_options.l"
{ ECHO; rismData.apply_rism_force = atoi( &mmotext[17] ); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 119 "mm_options.l"
{ ECHO; rismData.polarDecomp = atoi( &mmotext[12] ); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 120 "mm_options.l"
{ ECHO; rismData.rismnrespa = atoi( &mmotext[11] ); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 121 "mm_options.l"
{ ECHO; rismData.fcestride = atoi( &mmotext[10] ); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 122 "mm_options.l"
{ ECHO; rismData.fcecut = atof( &mmotext[7] ); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 123 "mm_options.l"
{ ECHO; rismData.fcenbasis = atoi( &mmotext[10] ); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 124 "mm_options.l"
{ ECHO; rismData.fcecrd = atoi( &mmotext[7] ); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 125 "mm_options.l"
{ ECHO; rismData.saveprogress = atoi( &mmotext[13] ); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 126 "mm_options.l"
{ ECHO; rismData.ntwrism = atoi( &mmotext[8] ); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 127 "mm_options.l"
{ ECHO; rismData.verbose = atoi( &mmotext[8] ); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 128 "mm_options.l"
{ ECHO; rismData.progress = atoi( &mmotext[9] ); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 129 "mm_options.l"
{ ECHO; ntpr_rism = atoi( &mmotext[10] ); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 131 "mm_options.l"
{ ECHO; pbsa = atoi( &mmotext[4] ); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 132 "mm_options.l"
{ ECHO; inp = atoi( &mmotext[4] ); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 133 "mm_options.l"
{ ECHO; epsin = atof( &mmotext[6] ); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 134 "mm_options.l"
{ ECHO; epsout = atof( &mmotext[7] ); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 135 "mm_options.l"
{ ECHO; smoothopt = atoi( &mmotext[10] ); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 136 "mm_options.l"
{ ECHO; istrng = atof( &mmotext[7] ); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 137 "mm_options.l"
{ ECHO; ivalence = atof( &mmotext[9] ); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 138 "mm_options.l"
{ ECHO; radiopt = atoi( &mmotext[8] ); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 139 "mm_options.l"
{ ECHO; dprob = atof( &mmotext[6] ); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 140 "mm_options.l"
{ ECHO; iprob = atof( &mmotext[6] ); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 141 "mm_options.l"
{ ECHO; npbopt = atoi( &mmotext[7] ); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 142 "mm_options.l"
{ ECHO; solvopt = atoi( &mmotext[8] ); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 143 "mm_options.l"
{ ECHO; accept = atof( &mmotext[7] ); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 144 "mm_options.l"
{ ECHO; maxitn = atoi( &mmotext[7] ); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 145 "mm_options.l"
{ ECHO; fillratio = atof( &mmotext[10] ); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 146 "mm_options.l"
{ ECHO; space = atof( &mmotext[6] ); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 147 "mm_options.l"
{ ECHO; nfocus = atoi( &mmotext[7] ); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 148 "mm_options.l"
{ ECHO; fscale = atoi( &mmotext[7] ); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 149 "mm_options.l"
{ ECHO; bcopt = atoi( &mmotext[6] ); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 150 "mm_options.l"
{ ECHO; eneopt = atoi( &mmotext[7] ); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 151 "mm_options.l"
{ ECHO; dbfopt = atoi( &mmotext[7] ); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 152 "mm_options.l"
{ ECHO; frcopt = atoi( &mmotext[7] ); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 153 "mm_options.l"
{ ECHO; cutnb = atof( &mmotext[6] ); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 154 "mm_options.l"
{ ECHO; sprob = atof( &mmotext[6] ); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 155 "mm_options.l"
{ ECHO; npbverb = atoi( &mmotext[8] ); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 156 "mm_options.l"
{ ECHO; arcres = atof( &mmotext[7] ); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 157 "mm_options.l"
{ ECHO; cavity_surften = atof( &mmotext[15] ); } 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 158 "mm_options.l"
{ ECHO; cavity_offset = atof( &mmotext[14] ); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 159 "mm_options.l"
{ ECHO; nsnba = atoi( &mmotext[6] ); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 160 "mm_options.l"
{ ECHO; npbgrid = atoi( &mmotext[8] ); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 161 "mm_options.l"
{ ECHO; maxarcdot = atoi( &mmotext[10] ); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 163 "mm_options.l"
{ ECHO; dield = -5; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 164 "mm_options.l"
{ ECHO; dield = -4; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 165 "mm_options.l"
{ ECHO; dield = -3; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 166 "mm_options.l"
{ ECHO; dield = -2; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 167 "mm_options.l"
{ ECHO; dield =  0; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 168 "mm_options.l"
{ ECHO; dield =  1; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 169 "mm_options.l"
{ ECHO; dielc = atof( &mmotext[6] ); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 171 "mm_options.l"
{ ECHO; irattle = atoi( &mmotext[7] ); }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 173 "mm_options.l"
;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 175 "mm_options.l"
{	
#ifdef flex
                if(mytaskid==0)fprintf( stderr, "Error: mm_option: unknown keyword or invalid value:\n" );
		if(mytaskid==0)fprintf( stderr, "  first character of the option is '%s'.\n", mmotext );
#else
		if(mytaskid==0)fprintf( stderr, "Error: mm_option: unknown keyword or invalid value: %s\n", --gopts );
#endif

		exit( 1 );
	}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 186 "mm_options.l"
ECHO;
	YY_BREAK
#line 2109 "<nabout>"
case YY_STATE_EOF(INITIAL):
	mmoterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int mmo_amount_of_matched_text = (int) (mmo_cp - (mmotext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*mmo_cp = (mmo_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->mmo_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mmoin at a new source and called
			 * mmolex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(mmo_n_chars) = YY_CURRENT_BUFFER_LVALUE->mmo_n_chars;
			YY_CURRENT_BUFFER_LVALUE->mmo_input_file = mmoin;
			YY_CURRENT_BUFFER_LVALUE->mmo_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for mmo_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since mmo_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (mmo_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars)] )
			{ /* This was really a NUL. */
			mmo_state_type mmo_next_state;

			(mmo_c_buf_p) = (mmotext_ptr) + mmo_amount_of_matched_text;

			mmo_current_state = mmo_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * mmo_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			mmo_next_state = mmo_try_NUL_trans( mmo_current_state );

			mmo_bp = (mmotext_ptr) + YY_MORE_ADJ;

			if ( mmo_next_state )
				{
				/* Consume the NUL. */
				mmo_cp = ++(mmo_c_buf_p);
				mmo_current_state = mmo_next_state;
				goto mmo_match;
				}

			else
				{
				mmo_cp = (mmo_c_buf_p);
				goto mmo_find_action;
				}
			}

		else switch ( mmo_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(mmo_did_buffer_switch_on_eof) = 0;

				if ( mmowrap( ) )
					{
					/* Note: because we've taken care in
					 * mmo_get_next_buffer() to have set up
					 * mmotext, we can now set up
					 * mmo_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(mmo_c_buf_p) = (mmotext_ptr) + YY_MORE_ADJ;

					mmo_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (mmo_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(mmo_c_buf_p) =
					(mmotext_ptr) + mmo_amount_of_matched_text;

				mmo_current_state = mmo_get_previous_state(  );

				mmo_cp = (mmo_c_buf_p);
				mmo_bp = (mmotext_ptr) + YY_MORE_ADJ;
				goto mmo_match;

			case EOB_ACT_LAST_MATCH:
				(mmo_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars)];

				mmo_current_state = mmo_get_previous_state(  );

				mmo_cp = (mmo_c_buf_p);
				mmo_bp = (mmotext_ptr) + YY_MORE_ADJ;
				goto mmo_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of mmolex */

/* mmo_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int mmo_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf;
	register char *source = (mmotext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (mmo_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->mmo_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (mmo_c_buf_p) - (mmotext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((mmo_c_buf_p) - (mmotext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->mmo_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->mmo_n_chars = (mmo_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->mmo_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int mmo_c_buf_p_offset =
				(int) ((mmo_c_buf_p) - b->mmo_ch_buf);

			if ( b->mmo_is_our_buffer )
				{
				int new_size = b->mmo_buf_size * 2;

				if ( new_size <= 0 )
					b->mmo_buf_size += b->mmo_buf_size / 8;
				else
					b->mmo_buf_size *= 2;

				b->mmo_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mmorealloc((void *) b->mmo_ch_buf,b->mmo_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->mmo_ch_buf = 0;

			if ( ! b->mmo_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(mmo_c_buf_p) = &b->mmo_ch_buf[mmo_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->mmo_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[number_to_move]),
			(mmo_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->mmo_n_chars = (mmo_n_chars);
		}

	if ( (mmo_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mmorestart(mmoin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->mmo_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((mmo_size_t) ((mmo_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->mmo_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		mmo_size_t new_size = (mmo_n_chars) + number_to_move + ((mmo_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf = (char *) mmorealloc((void *) YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in mmo_get_next_buffer()" );
	}

	(mmo_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(mmotext_ptr) = &YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[0];

	return ret_val;
}

/* mmo_get_previous_state - get the state just before the EOB char was reached */

    static mmo_state_type mmo_get_previous_state (void)
{
	register mmo_state_type mmo_current_state;
	register char *mmo_cp;
    
	mmo_current_state = (mmo_start);

	for ( mmo_cp = (mmotext_ptr) + YY_MORE_ADJ; mmo_cp < (mmo_c_buf_p); ++mmo_cp )
		{
		register YY_CHAR mmo_c = (*mmo_cp ? mmo_ec[YY_SC_TO_UI(*mmo_cp)] : 1);
		if ( mmo_accept[mmo_current_state] )
			{
			(mmo_last_accepting_state) = mmo_current_state;
			(mmo_last_accepting_cpos) = mmo_cp;
			}
		while ( mmo_chk[mmo_base[mmo_current_state] + mmo_c] != mmo_current_state )
			{
			mmo_current_state = (int) mmo_def[mmo_current_state];
			if ( mmo_current_state >= 924 )
				mmo_c = mmo_meta[(unsigned int) mmo_c];
			}
		mmo_current_state = mmo_nxt[mmo_base[mmo_current_state] + (unsigned int) mmo_c];
		}

	return mmo_current_state;
}

/* mmo_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = mmo_try_NUL_trans( current_state );
 */
    static mmo_state_type mmo_try_NUL_trans  (mmo_state_type mmo_current_state )
{
	register int mmo_is_jam;
    	register char *mmo_cp = (mmo_c_buf_p);

	register YY_CHAR mmo_c = 1;
	if ( mmo_accept[mmo_current_state] )
		{
		(mmo_last_accepting_state) = mmo_current_state;
		(mmo_last_accepting_cpos) = mmo_cp;
		}
	while ( mmo_chk[mmo_base[mmo_current_state] + mmo_c] != mmo_current_state )
		{
		mmo_current_state = (int) mmo_def[mmo_current_state];
		if ( mmo_current_state >= 924 )
			mmo_c = mmo_meta[(unsigned int) mmo_c];
		}
	mmo_current_state = mmo_nxt[mmo_base[mmo_current_state] + (unsigned int) mmo_c];
	mmo_is_jam = (mmo_current_state == 923);

	return mmo_is_jam ? 0 : mmo_current_state;
}

    static void mmounput (int c, register char * mmo_bp )
{
	register char *mmo_cp;
    
    mmo_cp = (mmo_c_buf_p);

	/* undo effects of setting up mmotext */
	*mmo_cp = (mmo_hold_char);

	if ( mmo_cp < YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (mmo_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->mmo_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf )
			*--dest = *--source;

		mmo_cp += (int) (dest - source);
		mmo_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->mmo_n_chars =
			(mmo_n_chars) = YY_CURRENT_BUFFER_LVALUE->mmo_buf_size;

		if ( mmo_cp < YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--mmo_cp = (char) c;

	(mmotext_ptr) = mmo_bp;
	(mmo_hold_char) = *mmo_cp;
	(mmo_c_buf_p) = mmo_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int mmoinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(mmo_c_buf_p) = (mmo_hold_char);

	if ( *(mmo_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* mmo_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (mmo_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->mmo_ch_buf[(mmo_n_chars)] )
			/* This was really a NUL. */
			*(mmo_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (mmo_c_buf_p) - (mmotext_ptr);
			++(mmo_c_buf_p);

			switch ( mmo_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because mmo_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mmorestart(mmoin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mmowrap( ) )
						return EOF;

					if ( ! (mmo_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return mmoinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(mmo_c_buf_p) = (mmotext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (mmo_c_buf_p);	/* cast for 8-bit char's */
	*(mmo_c_buf_p) = '\0';	/* preserve mmotext */
	(mmo_hold_char) = *++(mmo_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mmorestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        mmoensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            mmo_create_buffer(mmoin,YY_BUF_SIZE );
	}

	mmo_init_buffer(YY_CURRENT_BUFFER,input_file );
	mmo_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void mmo_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mmopop_buffer_state();
	 *		mmopush_buffer_state(new_buffer);
     */
	mmoensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(mmo_c_buf_p) = (mmo_hold_char);
		YY_CURRENT_BUFFER_LVALUE->mmo_buf_pos = (mmo_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->mmo_n_chars = (mmo_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mmo_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (mmowrap()) processing, but the only time this flag
	 * is looked at is after mmowrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(mmo_did_buffer_switch_on_eof) = 1;
}

static void mmo_load_buffer_state  (void)
{
    	(mmo_n_chars) = YY_CURRENT_BUFFER_LVALUE->mmo_n_chars;
	(mmotext_ptr) = (mmo_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->mmo_buf_pos;
	mmoin = YY_CURRENT_BUFFER_LVALUE->mmo_input_file;
	(mmo_hold_char) = *(mmo_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE mmo_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mmoalloc(sizeof( struct mmo_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mmo_create_buffer()" );

	b->mmo_buf_size = size;

	/* mmo_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->mmo_ch_buf = (char *) mmoalloc(b->mmo_buf_size + 2  );
	if ( ! b->mmo_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mmo_create_buffer()" );

	b->mmo_is_our_buffer = 1;

	mmo_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mmo_create_buffer()
 * 
 */
    void mmo_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->mmo_is_our_buffer )
		mmofree((void *) b->mmo_ch_buf  );

	mmofree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mmorestart() or at EOF.
 */
    static void mmo_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	mmo_flush_buffer(b );

	b->mmo_input_file = file;
	b->mmo_fill_buffer = 1;

    /* If b is the current buffer, then mmo_init_buffer was _probably_
     * called from mmorestart() or through mmo_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->mmo_bs_lineno = 1;
        b->mmo_bs_column = 0;
    }

        b->mmo_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void mmo_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->mmo_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->mmo_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->mmo_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->mmo_buf_pos = &b->mmo_ch_buf[0];

	b->mmo_at_bol = 1;
	b->mmo_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mmo_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void mmopush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	mmoensure_buffer_stack();

	/* This block is copied from mmo_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(mmo_c_buf_p) = (mmo_hold_char);
		YY_CURRENT_BUFFER_LVALUE->mmo_buf_pos = (mmo_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->mmo_n_chars = (mmo_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(mmo_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mmo_switch_to_buffer. */
	mmo_load_buffer_state( );
	(mmo_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void mmopop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	mmo_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((mmo_buffer_stack_top) > 0)
		--(mmo_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		mmo_load_buffer_state( );
		(mmo_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mmoensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(mmo_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(mmo_buffer_stack) = (struct mmo_buffer_state**)mmoalloc
								(num_to_alloc * sizeof(struct mmo_buffer_state*)
								);
		if ( ! (mmo_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mmoensure_buffer_stack()" );
								  
		memset((mmo_buffer_stack), 0, num_to_alloc * sizeof(struct mmo_buffer_state*));
				
		(mmo_buffer_stack_max) = num_to_alloc;
		(mmo_buffer_stack_top) = 0;
		return;
	}

	if ((mmo_buffer_stack_top) >= ((mmo_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (mmo_buffer_stack_max) + grow_size;
		(mmo_buffer_stack) = (struct mmo_buffer_state**)mmorealloc
								((mmo_buffer_stack),
								num_to_alloc * sizeof(struct mmo_buffer_state*)
								);
		if ( ! (mmo_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mmoensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((mmo_buffer_stack) + (mmo_buffer_stack_max), 0, grow_size * sizeof(struct mmo_buffer_state*));
		(mmo_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mmo_scan_buffer  (char * base, mmo_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mmoalloc(sizeof( struct mmo_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mmo_scan_buffer()" );

	b->mmo_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->mmo_buf_pos = b->mmo_ch_buf = base;
	b->mmo_is_our_buffer = 0;
	b->mmo_input_file = 0;
	b->mmo_n_chars = b->mmo_buf_size;
	b->mmo_is_interactive = 0;
	b->mmo_at_bol = 1;
	b->mmo_fill_buffer = 0;
	b->mmo_buffer_status = YY_BUFFER_NEW;

	mmo_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mmolex() will
 * scan from a @e copy of @a str.
 * @param mmostr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mmo_scan_bytes() instead.
 */
YY_BUFFER_STATE mmo_scan_string (mmoconst char * mmostr )
{
    
	return mmo_scan_bytes(mmostr,strlen(mmostr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to mmolex() will
 * scan from a @e copy of @a bytes.
 * @param mmobytes the byte buffer to scan
 * @param _mmobytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mmo_scan_bytes  (mmoconst char * mmobytes, int  _mmobytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	mmo_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _mmobytes_len + 2;
	buf = (char *) mmoalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mmo_scan_bytes()" );

	for ( i = 0; i < _mmobytes_len; ++i )
		buf[i] = mmobytes[i];

	buf[_mmobytes_len] = buf[_mmobytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mmo_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mmo_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->mmo_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void mmo_fatal_error (mmoconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine mmoless() so it works in section 3 code. */

#undef mmoless
#define mmoless(n) \
	do \
		{ \
		/* Undo effects of setting up mmotext. */ \
        int mmoless_macro_arg = (n); \
        YY_LESS_LINENO(mmoless_macro_arg);\
		mmotext[mmoleng] = (mmo_hold_char); \
		(mmo_c_buf_p) = mmotext + mmoless_macro_arg; \
		(mmo_hold_char) = *(mmo_c_buf_p); \
		*(mmo_c_buf_p) = '\0'; \
		mmoleng = mmoless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int mmoget_lineno  (void)
{
        
    return mmolineno;
}

/** Get the input stream.
 * 
 */
FILE *mmoget_in  (void)
{
        return mmoin;
}

/** Get the output stream.
 * 
 */
FILE *mmoget_out  (void)
{
        return mmoout;
}

/** Get the length of the current token.
 * 
 */
int mmoget_leng  (void)
{
        return mmoleng;
}

/** Get the current token.
 * 
 */

char *mmoget_text  (void)
{
        return mmotext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void mmoset_lineno (int  line_number )
{
    
    mmolineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see mmo_switch_to_buffer
 */
void mmoset_in (FILE *  in_str )
{
        mmoin = in_str ;
}

void mmoset_out (FILE *  out_str )
{
        mmoout = out_str ;
}

int mmoget_debug  (void)
{
        return mmo_flex_debug;
}

void mmoset_debug (int  bdebug )
{
        mmo_flex_debug = bdebug ;
}

static int mmo_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mmolex_destroy(), so don't allocate here.
     */

    (mmo_buffer_stack) = 0;
    (mmo_buffer_stack_top) = 0;
    (mmo_buffer_stack_max) = 0;
    (mmo_c_buf_p) = (char *) 0;
    (mmo_init) = 0;
    (mmo_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    mmoin = stdin;
    mmoout = nabout;
#else
    mmoin = (FILE *) 0;
    mmoout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mmolex_init()
     */
    return 0;
}

/* mmolex_destroy is for both reentrant and non-reentrant scanners. */
int mmolex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mmo_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mmopop_buffer_state();
	}

	/* Destroy the stack itself. */
	mmofree((mmo_buffer_stack) );
	(mmo_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mmolex() is called, initialization will occur. */
    mmo_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef mmotext_ptr
static void mmo_flex_strncpy (char* s1, mmoconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int mmo_flex_strlen (mmoconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mmoalloc (mmo_size_t  size )
{
	return (void *) malloc( size );
}

void *mmorealloc  (void * ptr, mmo_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mmofree (void * ptr )
{
	free( (char *) ptr );	/* see mmorealloc() for (char *) cast */
}

#define YYTABLES_NAME "mmotables"

#line 186 "mm_options.l"



int mmowrap(){
	return( 1 );
}

#ifdef flex


int  mmo_mmoinput( buf, max_size )

char *buf;
int  max_size;
{
	int n;

	if( max_size > &gopts[mmoinputlim] - mmoinputptr ) 
		n =  &gopts[mmoinputlim] - mmoinputptr;
	else
		n = max_size;

	if( n>0 ){
		memcpy( buf, mmoinputptr, n );
		mmoinputptr += n;
	}
	return n;
}

#endif

