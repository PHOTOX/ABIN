#!/bin/bash
# This is a sample script for launching ABIN simulations in cluster environments
# using MPI TeraChem interface.

# 1. Copy all data from CWD to the node's scratch.
# 2. Launch ABIN.
# 3. Copy data back (only newer files are copied!).
# 4. Remove scratch directory. (if delscratch = true)

#$ -V -cwd
#$ -l num_gpu=1

# SETUP --------------------------------
OUTPUT=output
JOBNAME=ABIN_${JOB_ID}_$$
INPUTPARAM=input.in.pigle
INPUTGEOM=acrolein_opt.xyz
delscratch=true
INPUTVELOC=
MPITYPE=0   # 0 - ground state AIMD
            # 2 - Surface Hopping

################
N_TERA_SERVERS=1     # Use more TC servers for PIMD
########################################
# ABINEXE=/home/hollas/PHOTOX/bin/abin.mpi
# ABINEXE should be determined automatically from SetEnvironment.sh

export LD_LIBRARY_PATH=
source SetEnvironment.sh TERACHEM
MPIRUN_TERA="$MPIRUN -np 1 "
source SetEnvironment.sh ABIN mpi
# This needs to be the same as MPIRUN_TERA
MPIRUN_ABIN="$MPIRUN_TERA"

rm -f port.txt.*

grep -E -q -e pot.+_tera_ $INPUTPARAM
if [[ $? -eq 1 ]];then
   echo "Error: It appears that you did not specify pot=_tera_ in $INPUTPARAM."
   echo "Exiting..."
   exit 1 
fi

SCRDIR=/scratch/$USER/$JOBNAME

echo "Job started at: " >> $OUTPUT
date >> $OUTPUT
echo "Running on node:" >> $OUTPUT
uname -n >> $OUTPUT
echo "Working directory:" >> $OUTPUT
echo "$SCRDIR" >> $OUTPUT
echo " " >> $OUTPUT
uname -n > job.log
echo "$SCRDIR" >> job.log

KDE=`pwd`

if [[ -d $SCRDIR ]];then
   echo "Job direcory $SCRDIR already exist!"
   echo "Perhaps it's a leftover from some old job, you could probably delete it."
   echo "Exiting..."
   exit 1
else
   mkdir $SCRDIR
fi


cp -p * $SCRDIR/.
cd $SCRDIR

host=$(uname -a | awk '{print $2}')
port=teraport$$

# Direct connection via teraport currently not in use
sed -i "s/teraport=.*/teraport=\"\"/" $INPUTPARAM
#sed -i "s/teraport=.*/teraport=\"$port\"/" $INPUTPARAM

# Make sure hydra_nameserver is running
#hdra=$(ps -e | grep hydra_nameser)
#if [[ -z $hdra ]];then
#   hydra_nameserver &
#fi

declare -A terapid

numgpus=$(grep gpus tera.inp | awk '{print $2}')

if [[ $numgpus -gt 1 && $N_TERA_SERVERS -gt 1 ]];then
   echo "ERROR: Number of gpus per TC server should be 1!"
   echo "Set parameters \"gpus 1\" in tera.inp or"
   echo "parameter N_TERASERVERS=1 in r.terabin"
   exit 1
fi

let numcpus=numgpus*N_TERA_SERVERS
if [[ $numcpus -ne ${NSLOTS} ]];then
   echo "ERROR: You did not specify the correct number of CPUs in the qsub command"
   echo "The correct number of CPUs for your setting should be $numcpus"
   echo "Ciao!"
   exit 1
fi

for ((itera=1;itera<=N_TERA_SERVERS;itera++)) {
   if [[ $N_TERA_SERVERS -gt 1 ]];then
      let gpuid=itera-1
      sed -r "s/gpus.+/gpus $numgpus  $gpuid/" tera.inp > tera.inp.$itera
   else
      cp tera.inp tera.inp.1
   fi
   $MPIRUN_TERA $TERAEXE --inputfile=tera.inp.$itera --UseMPI=$MPITYPE --MPIPort=$port.$itera >> tera.out.$itera 2>&1 &
#  Get PID of the last process
   terapid[$itera]=$!
}


sleep 9
# Ugly workaround because MPI_Lookup does not work
for ((itera=1;itera<=N_TERA_SERVERS;itera++)) {
   grep port_name: tera.out.$itera | awk '{print $6}' | tail -1 > port.txt.$itera
}


if [[ -z $INPUTVELOC ]];then
   $MPIRUN_ABIN $ABINEXE -i $INPUTPARAM -x $INPUTGEOM >> $OUTPUT 2>&1 &
else
   $MPIRUN_ABIN $ABINEXE -v $INPUTVELOC -i $INPUTPARAM -x $INPUTGEOM >> $OUTPUT 2>&1 &
fi
abinpid=$!

while true;do

   # If ABIN dies, kill all living TC servers
   if ! `ps|grep -q $abinpid` ;then
      for tcpid in ${terapid[@]};do
         if `ps|grep -q $tcpid` ;then
            died=true
            echo "ABIN died. Killing TeraChem."
            kill -9 $tcpid 
         fi
      done
      if [[ $died != "true" ]];then
         echo "Both ABIN and TeraChem stopped."
      fi
      break

   else

      # If any TC server dies, kill all the other and ABIN
      for tcpid in ${terapid[@]};do
         if ! `ps|grep -q $tcpid` ;then
            echo "TeraChem died. Killing ABIN."
            kill -9 $abinpid 
            # Kill all remaining TC servers if any
            for tpid in ${terapid[@]};do
               if `ps|grep -q $tpid` ;then
                  kill -9 $tpid 
               fi
            done
         fi
         break
      done

   fi

   sleep 10

done

cp -upr * $KDE/.
if [[ $? -ne "0" ]];then
   echo "Error when copying the data from scratch back to the server."
   echo "I will keep the directory $SCRDIR on node:"
   uname -a
   exit 1
fi

cd ..

if [[ $delscratch -eq "true" ]];then
   rm -r $JOBNAME
fi


