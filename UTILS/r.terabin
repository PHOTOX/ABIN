#!/bin/bash
# This is a sample script for launching ABIN simulations in cluster environments
# using MPI TeraChem interface.

# 1. Copy all data from CWD to the node's scratch.
# 2. Launch ABIN.
# 3. Copy data back (only newer files are copied!).
# 4. Remove scratch directory. (if delscratch = true)

# Sample SGE Params on PHOTOX clusters

#$ -V -cwd
#$ -l num_gpu=1
#$ -pe shm 3
#$ -q aq-gpu-gtx690

# ABIN SETUP 
OUTPUT=output
JOBNAME=ABIN_${JOB_ID}_$$
INPUTPARAM=input.in
INPUTGEOM=mini.dat
INPUTVELOC=

# TeraChem SETUP
TC_INPUT=tera.inp
MPITYPE=0   # 0 - ground state AIMD
            # 2 - Surface Hopping

delscratch=true
N_TERA_SERVERS=1     # Use more TC servers for PIMD or REMD (Experimental)
################
# ABINEXE=/home/hollas/PHOTOX/bin/abin.mpi
# ABINEXE should be determined automatically from SetEnvironment.sh


# REMD SETTINGS, automatic from ABIN input
N_REPLICAS=1
grep -E -q -e ^[^!]*iremd[[:space:]]*=[[:space:]]*1\\b $INPUTPARAM
if [[ $? -eq 0 ]];then
   echo "REMD detected. Assuming one TC server per replica!"
   N_REPLICAS=$(grep -E -o -e ^[^!]*nreplica[[:space:]]*=[[:space:]]*[0-9]+ $INPUTPARAM | grep -E -o -e [0-9]+)
   N_TERA_SERVERS=$N_REPLICAS
fi

export LD_LIBRARY_PATH=
source SetEnvironment.sh TERACHEM
MPIRUN_TERA="$MPIRUN -np 1 "
source SetEnvironment.sh ABIN mpi
# DH HACK
ABINEXE=/home/hollas/ABIN-DEV/abin.dev.mpi
# This needs to be the same as MPIRUN_TERA
MPIRUN_ABIN="$MPIRUN -np $N_REPLICAS"

rm -f port.txt.*

grep -E -q -e ^[^!]*pot[[:space:]]*=[[:space:]]*[\'"]_tera_["\'] $INPUTPARAM
if [[ $? -eq 1 ]];then
   echo "ERROR: It appears that you did not specify pot=\'_tera_\' in $INPUTPARAM."
   exit 1 
fi

# when using reference potential ala O. Marsalek
# TODO: This is extremely brittle
pot_ref=$(awk -F"[! ,=\"']+" '{if($1=="pot_ref")print $2}' $INPUTPARAM)
INTERFACE_REF=${pot_ref^^}

SCRDIR=/scratch/$USER/$JOBNAME

uname -n > job.log
echo "$SCRDIR" >> job.log

KDE=`pwd`

if [[ -d $SCRDIR ]];then
   echo "ERROR: Job directory $SCRDIR already exist!"
   echo "Perhaps it's a leftover from some old job, you could probably delete it."
   exit 1
else
   mkdir $SCRDIR
fi

function files_exist {
   for file in $* ;
   do
      if [[ ! -f $file ]];then
         echo "ERROR: Cannot find file $1"
         error=1
      fi
   done
   if [[ ! -z $error ]];then
      exit 1
   fi
}

function dirs_exist {
   for dir in $* ;do
      if [[ ! -d $dir ]];then
         echo "ERROR: Cannot find folder $1"
         error=1
      fi
   done
   if [[ ! -z $error ]];then
      exit 1
   fi
}

file_exists $TC_INPUT $INPUTPARAM
if [[ ! -z $INTERFACE_REF ]];then
   dir_exists $INTERFACE_REF
fi

cp -p * $SCRDIR/.

if [[ -d $INTERFACE_REF ]];then
   cp -r $INTERFACE_REF $SCRDIR/
fi

cd $SCRDIR

host=$(uname -a | awk '{print $2}')
port=teraport$$

# Direct connection via teraport currently not in use
sed -i "s/teraport=.*/teraport=\"\"/" $INPUTPARAM
#sed -i "s/teraport=.*/teraport=\"$port\"/" $INPUTPARAM

# Make sure hydra_nameserver is running
#hdra=$(ps -e | grep hydra_nameser)
#if [[ -z $hdra ]];then
#   hydra_nameserver &
#fi

declare -A terapid

numgpus=$(grep gpus $TC_INPUT | awk '{print $2}')

if [[ $numgpus -gt 1 && $N_TERA_SERVERS -gt 1 ]];then
   echo "ERROR: Number of gpus per TC server should be 1!"
   echo "Set parameters \"gpus 1\" in $TC_INPUT or"
   echo "parameter N_TERASERVERS=1 in r.terabin"
   exit 1
fi

let numcpus=numgpus*N_TERA_SERVERS
if [[ $numcpus -ne ${NSLOTS} ]];then
   echo "ERROR: You did not specify the correct number of CPUs in the qsub command"
   echo "The correct number of CPUs for your setting should be $numcpus"
   echo "Ciao!"
   exit 1
fi

for ((itera=1;itera<=N_TERA_SERVERS;itera++)) {
   if [[ $N_TERA_SERVERS -gt 1 ]];then
      let gpuid=itera-1
      sed -r "s/gpus.+/gpus $numgpus  $gpuid/" $TC_INPUT > $TC_INPUT.$itera
   else
      cp $TC_INPUT $TC_INPUT.1
   fi
   $MPIRUN_TERA $TERAEXE --inputfile=$TC_INPUT.$itera --UseMPI=$MPITYPE --MPIPort=$port.$itera >> $TC_INPUT.out.$itera 2>&1 &
#  Get PID of the last process
   terapid[$itera]=$!
}

sleep 9
sync
# Ugly workaround because MPI_Lookup does not work
for ((itera=1;itera<=N_TERA_SERVERS;itera++)) {
   grep port_name: $TC_INPUT.out.$itera | awk '{print $6}' | tail -1 > port.txt.$itera
}
# Temporary fix for OLDER ABIN version
cp port.txt.1 port.txt

if [[ -z $INPUTVELOC ]];then
   $MPIRUN_ABIN $ABINEXE -i $INPUTPARAM -x $INPUTGEOM >> $OUTPUT 2>&1 &
else
   $MPIRUN_ABIN $ABINEXE -v $INPUTVELOC -i $INPUTPARAM -x $INPUTGEOM >> $OUTPUT 2>&1 &
fi
abinpid=$!

while true;do

   # If ABIN dies, kill all living TC servers
   if ! `ps|grep -q $abinpid` ;then
      for tcpid in ${terapid[@]};do
         if `ps|grep -q $tcpid` ;then
            died=true
            echo "ABIN died. Killing TeraChem."
            kill -9 $tcpid 
         fi
      done
      if [[ $died != "true" ]];then
         echo "Both ABIN and TeraChem stopped."
      fi
      break

   else

      # If any TC server dies, kill all the other and ABIN
      for tcpid in ${terapid[@]};do
         if ! `ps|grep -q $tcpid` ;then
            echo "TeraChem died. Killing ABIN."
            kill -9 $abinpid 
            # Kill all remaining TC servers if any
            for tpid in ${terapid[@]};do
               if `ps|grep -q $tpid` ;then
                  kill -9 $tpid 
               fi
            done
         fi
         break
      done

   fi

   sleep 10

done

cp -upr * $KDE/.
if [[ $? -ne "0" ]];then
   echo "Error when copying the data from scratch back to the server."
   echo "I will keep the directory $SCRDIR on node:"
   uname -a
   exit 1
fi

cd ..

if [[ $delscratch -eq "true" ]];then
   rm -r $JOBNAME
fi


