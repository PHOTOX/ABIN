#!/bin/bash
#---------------------------------------------------------------------------------
#  Create_Wigner_Trajectories                   Daniel Hollas, Ondrej Svoboda 2014

#-This simple script generates and executes a set of dynamical trajectories using ABIN.
#-It uses the Wigner transformation for initial conditions generated by script wigner_sampling.sh.
#-It expects the use of surface hopping, but can be also used for normal AIMD.
#-(just set 'nstate=1' below)
#-The trajectories are executed and stored in $folder
# Files needed in this folder: r.abin,input.in,make_restart
# MyIRandom program should be in your $PATH.
# Also folder $pot (e.g. MOLPRO) is needed.
#---------------------------------------------------------------------------------

#######-----SETUP---#############
input=input.in
# following variables can be determined automatically from input for SH runs
# for classical AIMD, set initialstate and nstate equal to 1
initialstate=$(awk -F"[,=]" '{if($1=="istate_init")print $2}' $input) #initial state for SH
nstate=$(awk -F"[,=]" '{if($1=="nstate")print $2}' $input)   #total number of electronic states
natom=$(awk -F"[,=]" '{if($1=="natom")print $2}' $input) #number of atoms

isample=1  	        # initial number of traj
nsample=1	        # number of trajectories
folder=CAS22.$initialstate  # name of the directory
molname=water            # for the name of the job in the queue
abinexe=/home/$USER/bin/abin.dev  # path to abin binary
PATHTOWIGNER="./WIGNER/FMSTRAJS"  # path to wigner "trajectories"
irandom0=10061989       # random seed, set negative for random seed based on time
pot="MOLPRO"            # folder with ab initio bash script
#submit="qsub -q aq"    # comment this line if you don't want to submit to queue yet
rewrite=1               # if =1 -> rewrite trajectories that already exist

##########END OF SETUP##########

echo "initial_state nstate natom"
echo $initialstate $nstate $natom

#- NO MORE MODIFICATION USUALLY NEEDED
i=$isample
echo "$initialstate  $nstate  $natom">initial  #for make_restart
inputcheck=$(awk '{if($1=="&general"){print NR;exit 0}}' $input)
if [[ $inputcheck -ne 1 ]];then
	echo "First line in file $input must be \"&general\"!"
	echo "Exiting now..."
	exit 1
fi

#--------------------generation of random numbers--------------------------------
echo "Generating $nsample random integers."
MyIRandom $irandom0 $nsample > iran.dat
if [[ $? -ne "0" ]];then
   echo "Error during random number generation.Exiting now..."
   exit 1
fi
#--------------------------------------------------------------------------------

mkdir -p $folder
cp initial iseed0 $input $folder

while [[ $i -le "$nsample" ]];do

if [[ -e "$folder/TRAJ.$i" ]];then
   if [[ $rewrite -eq 1 ]];then

      rm -r $folder/TRAJ.$i ; mkdir $folder/TRAJ.$i

   else

      echo "Trajectory number $i already exists!"
      echo "Exiting..."
      exit 1

   fi
fi

cp -r $pot $folder/TRAJ.$i

#-----the same initial geometries for simulations from all initial states----

if [[ -e "mini.dat" ]] || [[ -e "restart.xyz" ]];then
   echo "Error: Files mini.dat or restart.xyz were found here."
   echo "Please remove them."
   exit 1
fi

if [[ ! -d "$PATHTOWIGNER" ]];then
   echo "Error: Folder $PATHTOWIGNER does not exists!"
   exit 1
fi


./make_restart $PATHTOWIGNER/FMSINPOUT/geometry.xyz < $PATHTOWIGNER/FMSTRAJS/Traj.$i
if [[ $? -ne 0 ]];then
   echo "Error occured during generation of restart.xyz. Exiting now..."
   exit 1
fi

mv mini.dat restart.xyz $folder/TRAJ.$i/


irandom=`head -$i iran.dat |tail -1`

echo '&general' > $folder/TRAJ.$i/input.in
echo "irandom=$irandom,         ! random seed">>$folder/TRAJ.$i/input.in
grep -v -e irandom -e '&general' $input >> $folder/TRAJ.$i/input.in

cd $folder/TRAJ.$i/

#------------sending on scratch-------------------------------------------
cat > r.$molname.$initialstate.$i << EOF
#!/bin/bash
ABINEXE=$abinexe
JOBNAME=ABIN.$molname.$initialstate.$i
INPUTPARAM=input.in
INPUTGEOM=mini.dat
OUTPUT=output
EOF
grep -v -e 'ABINEXE=' -e "JOBNAME=" -e "INPUTPARAM=" -e "INPUTGEOM=" ../../r.abin >>r.$molname.$initialstate.$i

#---------------------------------------------------------------------------
if [[ ! -z "$submit" ]];then
   $submit -cwd r.$molname.$initialstate.$i
fi

cd ../..
let i++

done

