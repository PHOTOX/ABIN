! Testing functions from mod_fftw defined in src/fftw_interface.F90
module test_fftw
   use funit
   use mod_const, only: DP
   use mod_fftw3
   implicit none
   integer, parameter :: NBEADS = 4
   save

contains

#ifdef USE_FFTW

   ! This routine is called automatically before each test.
   @before
   subroutine setup()
      call fftw_normalmodes_init(NBEADS)
   end subroutine setup

   ! This routine is called automatically after each test.
   @after
   subroutine teardown()
      call fftw_normalmodes_finalize()
   end subroutine teardown

   ! Here we just test we can initialize and finalize FFTW module
   ! without dying, no assertions here.
   @test(ifdef=USE_FFTW)
   subroutine test_fftw_init_and_finalize()
   end subroutine test_fftw_init_and_finalize

   ! TODO
   @test(ifdef=USE_FFTW)
   @disable
   subroutine test_dft_normalmode2cart()
   end subroutine test_dft_normalmode2cart

   @test(ifdef=USE_FFTW)
   @disable
   subroutine test_dft_cart2normalmode()
   end subroutine test_dft_cart2normalmode

#else

   @before
   subroutine setup()
   end subroutine setup

   @after
   subroutine teardown()
      ! This one is must be a no-op, so no exception should be raised
      call fftw_normalmodes_finalize()
   end subroutine teardown

   @test(ifndef=USE_FFTW)
   subroutine test_not_compiled_with_fftw()
      use, intrinsic :: iso_c_binding, only: C_DOUBLE, C_DOUBLE_COMPLEX
      complex(C_DOUBLE_COMPLEX), dimension(1) :: normal_modes
      real(C_DOUBLE), dimension(1) :: xyz
      integer :: nbeads

      call fftw_normalmodes_init(nbeads)
      @assertExceptionRaised('ABIN was not compiled with FFTW library')

      call dft_normalmode2cart(normal_modes, xyz)
      @assertExceptionRaised('ABIN was not compiled with FFTW library')

      call dft_cart2normalmode(xyz, normal_modes)
      @assertExceptionRaised('ABIN was not compiled with FFTW library')
   end subroutine test_not_compiled_with_fftw

#endif
end module test_fftw
