! Testing functions for Lennard-Jones / Coulomb force field
module test_mm
   use funit
   use mod_const, only: DP, ANG
   use mod_files, only: stdout_to_devnull, stderr_to_stdout, &
                     &  reset_stdout, reset_stderr
   use mod_force_mm
   implicit none
   integer, parameter :: NATOM = 2, NWALK = 2
   real(DP), dimension(NATOM, NWALK) :: x, y, z
   real(DP), dimension(NATOM, NWALK) :: fx, fy, fz
   real(DP) :: eclas
   integer, parameter :: NTYPES = 2
   real(DP), dimension(NTYPES) :: rmin, eps, q
   character(len=2), dimension(NTYPES) :: types
   character(len=2), dimension(NATOM) :: names

contains

   @before
   subroutine setup()
      use mod_general, only: natom

      natom = 2
      eclas = 0.0D0
      fx = 0.0D0
      fy = 0.0D0
      fz = 0.0D0

      call stdout_to_devnull()
      call stderr_to_stdout()
   end subroutine setup

   @after
   subroutine teardown()
      call finalize_mm()
      call reset_stdout()
      call reset_stderr()
   end subroutine teardown

   @test
   subroutine test_mm_init()
      real(DP), dimension(NTYPES + 1) :: rmin, eps, q
      character(len=2), dimension(NTYPES + 1) :: types
      character(len=2), dimension(NATOM) :: names

      names = (/'Kr', 'Xe'/)
      ! Atom type names are should get normalized
      types = (/'xe', 'kR', '  '/)

      call random_number(rmin)
      call random_number(eps)
      call random_number(q)

      call initialize_mm(NATOM, names, types, q, rmin, eps)
      call finalize_mm()

      types(2) = ''
      call initialize_mm(NATOM, names, types, q, rmin, eps)
      @assertExceptionRaised('Atom name Kr does not have corresponding atom type in MM parameters')
   end subroutine

   @test
   subroutine test_like_charges()
      types = (/'Kr', 'Xe'/)
      names = types
      rmin = 1.0D0
      eps = 0.0D0

      ! Two positive charges
      call random_number(q)

      call random_number(x)
      call random_number(y)
      call random_number(z)
      x(1, :) = 0.0D0
      y(1, :) = 0.0D0
      z(1, :) = 0.0D0

      call initialize_mm(NATOM, names, types, q, rmin, eps)

      call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
      @assertGreaterThan(eclas, 0.0D0, 'like charges, positive energy')
      @assertLessThan(fx(1, 1), 0.0D0, 'fx repel')
      @assertLessThan(fy(1, 1), 0.0D0, 'fy repel')
      @assertLessThan(fz(1, 1), 0.0D0, 'fz repel')

      ! Two negative charges
      q = -q
      call finalize_mm()
      call initialize_mm(NATOM, names, types, q, rmin, eps)

      call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
      @assertGreaterThan(eclas, 0.0D0, 'two negative charges, positive energy')
      @assertLessThan(fx(1, 1), 0.0D0, 'fx repel')
      @assertLessThan(fy(1, 1), 0.0D0, 'fy repel')
      @assertLessThan(fz(1, 1), 0.0D0, 'fz repel')
   end subroutine

   subroutine test_opposite_charges()
      types = (/'Kr', 'Xe'/)
      names = types
      rmin = 1.0D0
      eps = 0.0D0

      call random_number(q)
      q(2) = -q(2)

      call random_number(x)
      call random_number(y)
      call random_number(z)
      x(1, :) = 0.0D0
      y(1, :) = 0.0D0
      z(1, :) = 0.0D0

      call initialize_mm(NATOM, names, types, q, rmin, eps)

      call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)

      @assertLessThan(eclas, 0.0D0, 'opposite charges, negative energy')
      @assertGreaterThan(fx(1, 1), 0.0D0, 'fx attract')
      @assertGreaterThan(fy(1, 1), 0.0D0, 'fy attract')
      @assertGreaterThan(fz(1, 1), 0.0D0, 'fz attract')
   end subroutine

   @test
   subroutine test_LJ_minimum()
      real(DP), dimension(NATOM, NWALK) :: fzero = 0.0D0
      real(DP) :: E_min

      types = (/'Kr', 'Xe'/)
      names = types
      q = 0.0D0
      call random_number(rmin)
      call random_number(eps)

      ! At energy minimum
      x = 0.0D0
      y = 0.0D0
      z = 0.0D0

      x(2, :) = 0.5D0 * (rmin(1) + rmin(2)) * ANG
      E_min = -dsqrt(eps(1) * eps(2))

      call initialize_mm(NATOM, names, types, q, rmin, eps)

      call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
      @assertEqual(E_min, eclas, message='zero energy in minimum', tolerance=1E-14)
      @assertEqual(fzero, fx, message='zero fx in minimum', tolerance=1E-14)
      @assertEqual(fzero, fy, 'zero fy in minimum')
      @assertEqual(fzero, fz, 'zero fz in minimum')
   end subroutine

   @test
   subroutine test_bead_scaling()
      integer, parameter :: NTYPES = 2
      real(DP), dimension(NATOM, NWALK) :: fx1, fy1, fz1
      real(DP), dimension(NTYPES) :: rmin, eps, q
      character(len=2), dimension(NTYPES) :: types
      character(len=2), dimension(NATOM) :: names
      real(DP) :: eclas1
      integer :: i

      types = (/'Kr', 'Xe'/)
      names = types
      call random_number(rmin)
      call random_number(eps)
      call random_number(q)

      call initialize_mm(NATOM, names, types, q, rmin, eps)

      ! At random coordinates
      call random_number(x)
      call random_number(y)
      call random_number(z)
      ! Shifting coordinates to prevent too close contacts
      x(2, :) = x(2, :) + 10.0D0
      y(2, :) = y(2, :) + 10.0D0
      z(2, :) = z(2, :) + 10.0D0
      ! Two beads have the same coordinates
      x(:, 2) = x(:, 1)
      y(:, 2) = y(:, 1)
      z(:, 2) = z(:, 1)

      ! Compare 1 and 2 beads, both having the same coordinates
      call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
      eclas1 = 0.0D0
      fx1 = 0.0D0
      fy1 = 0.0D0
      fz1 = 0.0D0
      call force_mm(x, y, z, fx1, fy1, fz1, eclas1, 1)

      @assertEqual(eclas, eclas1, message='Energy independent of nwalk', tolerance=1E-12)
      do i = 1, NWALK
         @assertEqual(fx1(1, 1), fx(1, i), message='fx independent of nwalk', tolerance=1E-15)
         @assertEqual(fy1(1, 1), fy(1, i), message='fy independent of nwalk', tolerance=1E-15)
         @assertEqual(fz1(1, 1), fz(1, i), message='fz independent of nwalk', tolerance=1E-15)
      end do

      ! Test 3rd Newton's law, action and reaction
      @assertEqual(fx1(1, :), -fx1(2, :), message='fx reaction')
      @assertEqual(fy1(1, :), -fy1(2, :), message='fy reaction')
      @assertEqual(fz1(1, :), -fz1(2, :), message='fz reaction')
   end subroutine

   ! Helper function if you want to check the potential
   @test
   @disable
   subroutine print_lj_potential()
      integer, parameter :: NATOM = 2, NWALK = 1
      real(DP) :: r0, rmax, r, dr
      integer :: u

      types(1) = 'Kr'
      types(2) = ''
      names = (/'Kr', 'Kr'/)
      rmin(1) = 1.0D0 * ANG
      eps(1) = 1.0D0
      q = 0.0D0

      call reset_stdout()
      call reset_stderr()
      call initialize_mm(NATOM, names, types, q, rmin, eps)

      open (newunit=u, file='lj_potential.dat', action='write')

      x = 0.0D0
      y = 0.0D0
      z = 0.0D0

      r0 = rmin(1) * ANG - 0.6D0
      rmax = 10.0D0
      dr = 0.1
      r = r0
      x(2, 1) = r
      do while (r < rmax)
         r = r + dr
         x(2, 1) = r
         eclas = 0.0D0
         call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
         write (u, *) r, eclas
      end do

      close (u)
   end subroutine

   @test
   @disable
   subroutine print_coulomb_potential()
      integer, parameter :: NATOM = 2, NWALK = 1
      real(DP) :: r0, rmax, r, dr
      integer :: u

      types(1) = 'Kr'
      types(2) = ''
      names = (/'Kr', 'Kr'/)
      rmin(1) = 1.0D0
      eps(1) = 0.00
      q = 0.01D0
      q(2) = -q(1)

      call reset_stdout()
      call reset_stderr()
      call initialize_mm(NATOM, names, types, q, rmin, eps)

      open (newunit=u, file='coulomb_potential.dat', action='write')

      x = 0.0D0
      y = 0.0D0
      z = 0.0D0

      r0 = 0.5D0
      rmax = 5.0D0
      dr = 0.1
      r = r0
      x(2, 1) = r
      do while (r < rmax)
         r = r + dr
         x(2, 1) = r
         eclas = 0.0D0
         call force_mm(x, y, z, fx, fy, fz, eclas, NWALK)
         write (u, *) r, eclas
      end do

      close (u)
   end subroutine

end module test_mm
