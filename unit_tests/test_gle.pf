! Testing GLE thermostat
module test_gle
   use funit
   use mod_gle
   use mod_const, only: DP
   implicit none

contains

   @test
   subroutine test_write_read_propagator()
      use mod_gle, only: write_propagator, read_propagator
      integer, parameter :: ns = 2
      real(DP), parameter :: dt = 5.0D0
      real(DP) :: S(ns + 1, ns + 1), T(ns + 1, ns + 1)
      real(DP) :: Sread(ns + 1, ns + 1), Tread(ns + 1, ns + 1)
      integer :: i, j

      call random_seed()
      call random_number(S)

      call write_propagator(S, dt, ns, 'GLE-S.bin')
      call read_propagator(dt, ns, 'GLE-S.bin', Sread)

      do i = 1, ns + 1
         do j = 1, ns + 1
            call assertEqual(S(i, j), Sread(i, j), 'S matrix elements')
         end do
      end do
      call system('rm GLE-S.bin')
   end subroutine test_write_read_propagator

   @test
   subroutine test_read_propagator_errors()
      use mod_gle, only: write_propagator, read_propagator
      integer, parameter :: ns = 3
      real(DP), parameter :: dt = 5.0D0
      real(DP) :: S(ns + 1, ns + 1), T(ns + 1, ns + 1)
      real(DP) :: Sread(ns + 1, ns + 1), Tread(ns + 1, ns + 1)
      integer :: u

      call random_seed()
      call random_number(S)

      call write_propagator(S, dt, ns, 'GLE-S.bin')

      call read_propagator(dt + 1.D0, ns, 'GLE-S.bin', Sread)
      @assertExceptionRaised('dt read from file GLE-S.bin does not match')

      call read_propagator(dt, ns + 1, 'GLE-S.bin', Sread)
      @assertExceptionRaised('ns read from file GLE-S.bin does not match')

      call system('rm GLE-S.bin')
   end subroutine test_read_propagator_errors

   @test
   @disable
   subroutine test_compute_propagator()
      !use mod_gle, only: read_propagator, compute_propagator
      !integer, parameter :: ns = 2
      !real(DP), parameter :: dt = 2.0D0
      !real(DP) :: A(ns+1, ns + 1), C(ns+1, ns + 1)
      !real(DP) :: S(ns+1, ns+1), T(ns+1, ns+1)
      !real(DP) :: Sread(ns+1, ns+1), Tread(ns+1, ns+1)
      !integer :: i, j
      ! TODO: Test compute_propagator()
      ! TODO: Need to create these subroutines and refactor gle_init
      ! call read_gle_matrix(A, ns, 'GLE-A')
      ! call read_gle_matrix(C, ns, 'GLE-A')
      !call compute_propagator(dt, A, C, S, T)
      ! call system('cp GLE-S.bin.ref GLE-S.bin')
      ! call system('cp GLE-T.bin.ref GLE-T.bin')
      !call read_propagator(Tread, Sread, dt, ns)
      !do i = 1, ns + 1
      !   do j = 1, ns + 1
      !      call assertEqual(S(i, j), Sread(i, j), 'computed S matrix elements', tolerance=1e-14)
      !      call assertEqual(T(i, j), Tread(i, j), 'computed T matrix elements', tolerance=1e-14)
      !   end do
      !end do
   end subroutine test_compute_propagator

end module test_gle
