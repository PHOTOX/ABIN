! Testing functions from mod_utils,
! defined in utils.F90
module test_utils
   use funit
   use mod_utils
   implicit none

contains

   @test
   subroutine test_sanitize_string()
      ! NOTE: Sanitize string should exit when
      ! suspicious character is found, but we currently cannot
      ! test that. So we only test that it leaves valid strings
      ! alone, except for applying adjustl on them.
      @assertEqual("12345abC-._ ", sanitize_string("12345abC-._ "))

      @assertEqual("abC-._67890", sanitize_string("  abC-._67890 "))
   end subroutine test_sanitize_string

   @test
   subroutine test_tolower()

      ! Notice that we also left-adjust the string.
      @assertEqual("12abc-._ ", tolower("   12AbC-._ "))
   
   end subroutine test_tolower

   @test
   subroutine test_toupper()

      ! Notice that we also left-adjust the string.
      @assertEqual("ABC-._123", toupper("  AbC-._123 "))
   
   end subroutine test_toupper

   @test
   subroutine test_c_string()
      character(len=*), parameter :: fstring = " string "
      @assertEqual("string"//char(0), c_string(fstring), "c_string(' string ')")

      @assertEqual(len(fstring)+1, len(c_string(fstring)), "len(cstring) == len(fstring)+1")

      @assertEqual(6+1, len_trim(c_string(fstring)), "len_trim(c_string) = len(trim(adjustl(fstring)))+1")
   end subroutine test_c_string


   @test
   subroutine test_normalize_atom_name()
      @assertEqual("H", normalize_atom_name("h"), "h -> H")
      @assertEqual("Cl", normalize_atom_name("cl"), "cl -> Cl")
      @assertEqual("Fe", normalize_atom_name("FE"), "FE -> Fe")
      @assertEqual("H", normalize_atom_name("   h  "), "accepts blanks")
      @assertEqual("Cl", normalize_atom_name(" cl   "), "accepts blanks")
   end subroutine test_normalize_atom_name

   @test
   subroutine test_count_atoms_by_name()
      integer, parameter :: NATOM = 4
      character(len=2) :: names(NATOM)
      ! Note: names must already be normalized
      names = (/'He', 'C ', 'C ', 'Cl' /)
      @assertEqual(1, count_atoms_by_name(names, 'HE', NATOM))
      @assertEqual(2, count_atoms_by_name(names, 'c ', NATOM))
      @assertEqual(1, count_atoms_by_name(names, 'Cl', NATOM))
   end subroutine test_count_atoms_by_name

   @test
   subroutine test_get_distance()
      ! Cartesian distance between two atoms
      real(DP) :: x(2,2), y(2,2), z(2,2)
      integer :: iw
      real(DP) :: dist

      x(:,1) = [0.0d0, 1.0d0]
      y(:,1) = [2.0d0, 2.0d0]
      z(:,1) = [3.0d0, 3.0d0]

      iw = 1
      dist = get_distance(x, y, z, 1, 2, iw)
      @assertEqual(1.0d0, dist, "get_distance1")

      ! Should be invariant with respect to the atom order
      dist = get_distance(x, y, z, 2, 1, iw)
      @assertEqual(1.0d0, dist, "get_distance2")

      iw = 2
      ! Pascal triangle, 3^2 + 4^2 = 5^2
      x(:,2) = [1.0d0, 1.0d0]
      y(:,2) = [1.0d0, 4.0d0]
      z(:,2) = [4.0d0, 0.0d0]
      dist = get_distance(x, y, z, 1, 2, iw)
      @assertEqual(5.0d0, dist, "get_distance3")

      ! Should error when non-unique atom indeces are passed in
      dist = get_distance(x, y, z, 1, 1, iw)
      @assertExceptionRaised('Atom indices in get_distance() must be unique')
   end subroutine test_get_distance

   @test
   subroutine test_get_angle()
      real(DP) :: x(3,2), y(3,2), z(3,2)
      integer :: iw
      real(DP) :: ang

      x(:,1) = [0.0d0, 0.0d0, 0.0d0 ]
      y(:,1) = [1.0d0, 0.0d0, 0.0d0 ]
      z(:,1) = [0.0d0, 0.0d0, 1.0d0 ]
      iw = 1

      ang = get_angle(x, y, z, 1, 2, 3, iw)
      @assertEqual(90.0d0, ang, "get_angle_90")

      ! Test atom order invariance
      ang = get_angle(x, y, z, 3, 2, 1, iw)
      @assertEqual(90.0d0, ang, "get_angle_90_2")

      ang = get_angle(x, y, z, 2, 1, 3, iw)
      ! TODO: instead of hardcoding this imprecise value,
      ! specify a tolerance for 45.0d0. Need to figure out how.
      @assertEqual(45.000000000000007d0, ang, "get_angle_45")

      iw = 2
      x(:,2) = [1.0d0, 0.0d0, -1.0d0 ]
      y(:,2) = [2.0d0, 2.0d0, 2.0d0 ]
      z(:,2) = [3.0d0, 3.0d0, 3.0d0 ]
      ang = get_angle(x, y, z, 1, 2, 3, iw)
      @assertEqual(180.0d0, ang, "get_angle_180")

      ang = get_angle(x, y, z, 3, 2, 1, iw)
      @assertEqual(180.0d0, ang, "get_angle_180_2")

      ang = get_angle(x, y, z, 2, 1, 3, iw)
      @assertEqual(0.0d0, ang, "get_angle_0")
      ang = get_angle(x, y, z, 2, 3, 1, iw)
      @assertEqual(0.0d0, ang, "get_angle_0_2")

      ! Should error when non-unique atom indeces are passed in
      ang = get_angle(x, y, z, 3, 1, 1, iw)
      @assertExceptionRaised('Atom indices in get_angle() must be unique')

   end subroutine test_get_angle

   @test
   subroutine test_get_dihedral()
      real(DP) :: x(4,2), y(4,2), z(4,2)
      real(DP) :: shiftdih
      integer :: iw
      real(DP) :: ang

      ! Dihedral values between -180 -- 180 degrees
      shiftdih = 0.0d0

      x(:,1) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,1) = [1.0d0, 0.0d0, 0.0d0, 0.0d0 ]
      z(:,1) = [0.0d0, 0.0d0, 0.0d0, 1.0d0 ]

      iw = 1
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(-90.0d0, ang, "get_dihedral_-90")

      ang = get_dihedral(x, y, z, 1, 3, 2, 4, iw, shiftdih)
      @assertEqual(90.0d0, ang, "get_dihedral_90")

      x(:,2) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,2) = [1.0d0, 0.0d0, 0.0d0, -1.0d0 ]
      z(:,2) = [0.0d0, 0.0d0, 0.0d0, 0.0d0 ]

      iw = 2
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(180.0d0, ang, "get_dihedral_180")

      x(:,2) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,2) = [1.0d0, 0.0d0, 0.0d0, 1.0d0 ]
      z(:,2) = [0.0d0, 0.0d0, 0.0d0, 0.0d0 ]
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(0.0d0, ang, "get_dihedral_0")

      ! TODO: Should error when non-unique atom indeces are passed in
      !ang = get_dihedral(x, y, z, 1, 1, 3, 4, iw, shiftdih)
      !@assertExceptionRaised('Atom indices in get_dihedral() must be unique')

   end subroutine test_get_dihedral


   @test
   subroutine test_shifted_dihedral()
      real(DP) :: x(4,2), y(4,2), z(4,2)
      real(DP) :: shiftdih
      integer :: iw
      real(DP) :: ang

      ! Dihedral values between 0 - 360 degrees
      shiftdih = 360.0d0

      x(:,1) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,1) = [1.0d0, 0.0d0, 0.0d0, 0.0d0 ]
      z(:,1) = [0.0d0, 0.0d0, 0.0d0, 1.0d0 ]

      iw = 1
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(270.0d0, ang, "get_dihedral_270")

      ang = get_dihedral(x, y, z, 1, 3, 2, 4, iw, shiftdih)
      @assertEqual(90.0d0, ang, "get_dihedral_90")

      x(:,2) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,2) = [1.0d0, 0.0d0, 0.0d0, -1.0d0 ]
      z(:,2) = [0.0d0, 0.0d0, 0.0d0, 0.0d0 ]

      iw = 2
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(180.0d0, ang, "get_dihedral_180")

      x(:,2) = [1.0d0, 1.0d0, 0.0d0, 0.0d0 ]
      y(:,2) = [1.0d0, 0.0d0, 0.0d0, 1.0d0 ]
      z(:,2) = [0.0d0, 0.0d0, 0.0d0, 0.0d0 ]
      ang = get_dihedral(x, y, z, 1, 2, 3, 4, iw, shiftdih)
      @assertEqual(0.0d0, ang, "get_dihedral_0")

   end subroutine test_shifted_dihedral

   @test
   @disable
   subroutine test_invalid_angle()
      real(DP) :: x(3,1), y(3,1), z(3,1)
      real(DP) :: ang
      integer :: iw
      x = 0.0d0; y = 0.0d0; z = 0.0d0
      iw = 1
      ! TODO: Test that we fail gracefully if the atom indeces are not unique.
      ! We need to replace abinerror in tests
      ! For now, this test is skipped.
      ang = get_angle(x, y, z, 1, 1, 1, iw)
   end subroutine test_invalid_angle

end module test_utils
