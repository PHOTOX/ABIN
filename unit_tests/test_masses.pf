! Testing functions for initializing masses,
! currently defined in module.F90
module test_masses
   use funit
   use mod_utils
   use mod_const, only: AMU
   use mod_init, only: initialize_masses
   implicit none
   integer, parameter :: NATOM = 3
   real(DP) :: masses(NATOM)
   character(len=2) :: names(NATOM)
   character(len=2) :: massnames(NATOM)
   real(DP), allocatable :: am(:)

contains

   ! This routine is called automatically before each test.
   @before
   subroutine setup()
      use mod_files, only: stdout_to_devnull, stderr_to_stdout
      ! These are normally user-defined in the input file
      massnames = ''
      masses = -1.0D0
      call stdout_to_devnull()
      call stderr_to_stdout()
   end subroutine setup

   @after
   subroutine teardown()
      use mod_files, only: reset_stdout, reset_stderr
      deallocate (am)
      call reset_stdout()
      call reset_stderr()
   end subroutine teardown

   @test
   subroutine test_library_masses()
      names = (/'H', 'H', 'C'/)
      call initialize_masses(names, masses, massnames, NATOM, am)
      @assertEqual(1.008D0 * AMU, am(1), "hydrogen mass")
      @assertEqual(1.008D0 * AMU, am(2), "hydrogen mass 2")
      @assertEqual(12.0110D0 * AMU, am(3), "carbon mass")
   end subroutine test_library_masses

   @test
   subroutine test_custom_masses()
      names = (/'H ', 'XY', 'C '/)
      ! Here we override hydrogen mass, and define mass
      ! for custom atomtype XY
      massnames = (/'H ', 'XY', '  '/)
      masses = (/2.0D0, 5.0D0, -1.0D0/)
      call initialize_masses(names, masses, massnames, NATOM, am)
      @assertEqual(2.0D0 * AMU, am(1), "custom deuterium mass")
      @assertEqual(5.0D0 * AMU, am(2), "custom XY mass")
      @assertEqual(12.0110D0 * AMU, am(3), "carbon mass from library")
   end subroutine test_custom_masses

   @test
   subroutine test_not_specified()
      names = (/'H ', 'XY', 'C '/)
      call initialize_masses(names, masses, massnames, NATOM, am)
      @assertExceptionRaised('Atomic mass for atom XY was not specified')
   end subroutine test_not_specified

   @test
   subroutine test_duplicates()
      names = (/'H ', 'XY', 'C '/)
      massnames = (/'XY', 'XY', '  '/)
      masses = (/2.0D0, 5.0D0, -1.0D0/)
      call initialize_masses(names, masses, massnames, NATOM, am)
      @assertExceptionRaised('Duplicate atom names in input array "massnames"')
   end subroutine test_duplicates

   @test
   subroutine test_negative_mass()
      names = (/'H ', 'XY', 'C '/)
      massnames = (/'XY', '  ', '  '/)
      masses = (/-2.0D0, 5.0D0, -1.0D0/)
      call initialize_masses(names, masses, massnames, NATOM, am)
      @assertExceptionRaised('Mass cannot be negative. Fix arrays "masses" in the input file.')
   end subroutine test_negative_mass

   @test
   subroutine test_element_library()
      character(len=2) :: elements(94)
      integer :: i

      masses = -1
      massnames = ''
      ! NOTE: Some elements are switched so that atomic masses are
      ! monotonically increasing, which we test below.
      ! Switched elements:
      ! K - Ar, Co - Ni, Te - I, Th-Pa
      elements = (/ &
         & 'H1', 'H ', 'D ', 'He', 'Li', 'Be', 'B ', 'C ', 'N ', 'O ', 'F ', 'Ne', &
         & 'Na', 'Mg', 'Al', 'Si', 'P ', 'S ', 'Cl', 'K ', 'Ar', &
         & 'Ca', 'Sc', 'Ti', 'V ', 'Cr', 'Mn', 'Fe', 'Ni', 'Co', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', &
         & 'Rb', 'Sr', 'Y ', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'I ', 'Te', 'Xe', &
         & 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', &
         & 'Hf', 'Ta', 'W ', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', &
         & 'Fr', 'Ra', 'Ac', 'Pa', 'Th', 'U '/)

      call initialize_masses(elements, masses, massnames, size(elements), am)

      do i = 2, size(elements)
         @assertGreaterThan(am(i), am(i-1), "atomic masses are increasing")
      end do
   end subroutine

end module test_masses
