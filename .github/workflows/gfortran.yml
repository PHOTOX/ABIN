name: GFortran CI

on:
  push:
    branches: [ master ]
  pull_request:


jobs:

  basic_build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
         gcc_v: [7, 8, 9]
    env:
      FC: gfortran
      FFLAGS: -O0 -fopenmp -Wall --coverage
      GCC_V: ${{ matrix.gcc_v}}

    steps:
    - uses: actions/checkout@v2
    - name: Set GFortran version
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V}

    # pFUnit library is used to build and run unit tests
    - name: pFUnit build Cache
      id: pfunit-cache
      uses: actions/cache@v2
      with:
        path: ~/pfunit/build/installed
        # To force a pFUnit rebuild (bust the cache), make a change to install_pfunit.sh
        key: ${{ runner.os }}-pfunit-gfortran${{ env.GCC_V }}-${{ hashFiles('scripts/install_pfunit.sh') }}

    # TODO: We should specify a specific commit in install_pfunit.sh
    # so that we're not dependent on changes in pFUnit
    - name: Download and build pFUnit
      if: steps.pfunit-cache.outputs.cache-hit != 'true'
      run: ./scripts/install_pfunit.sh ${HOME}/pfunit

    - name: build ABIN
      run: ./configure --pfunit ${HOME}/pfunit/build/installed/ && make

    - name: test ABIN
      run: make test

   # TODO: Separate unit test coverage
    - name: Codecov upload
      run:  bash <(curl -s https://codecov.io/bash)


  optimized_build:
    runs-on: ubuntu-latest
    needs: basic_build
    strategy:
      matrix:
         gcc_v: [7, 8, 9]
    env:
      FC: gfortran
      FFLAGS: -O3 -fopenmp -Wall
      GCC_V: ${{ matrix.gcc_v}}

    steps:
    - uses: actions/checkout@v2
    - name: Set GFortran version
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V}

    - name: pFUnit build Cache
      id: pfunit-cache
      uses: actions/cache@v2
      with:
        path: ~/pfunit/build/installed
        key: ${{ runner.os }}-pfunit-gfortran${{ env.GCC_V }}-${{ hashFiles('scripts/install_pfunit.sh') }}

    - name: Download and build pFUnit
      if: steps.pfunit-cache.outputs.cache-hit != 'true'
      run: ./scripts/install_pfunit.sh ${HOME}/pfunit

    - name: build ABIN
      run: ./configure --pfunit ${HOME}/pfunit/build/installed/ && make

    - name: test ABIN
      run: make test

  # Consider whether this needs to be a separate job
  # or whether it should be default for all builds
  # Here we just take the defaults everywhere, except turning on FFTW
  fftw_build:
    # Temporarily disable
    if: false
    # Let's try the latest Ubuntu 20.2
    # ubuntu-latest is still 18.0 on Github
    # https://github.com/actions/virtual-environments#available-environments
    runs-on: ubuntu-20.04
    needs: basic_build
    strategy:
      fail-fast: false
      matrix:
         gcc_v: [7, 8, 9]
    env:
      FFLAGS: -O2 -fopenmp
    steps:
    - uses: actions/checkout@v2
    - name: Install FFTW libraries
      run: sudo apt-get install libfftw3-dev
    - name: build
      run: ./configure --fftw && make
    - name: test
      run: make test

  mpich_build:
    runs-on: ubuntu-latest
    needs: basic_build
    strategy:
      fail-fast: false
      matrix:
         gcc_v: [7, 8, 9]
         mpich_v: ["3.1.3", "3.3.2"]
    env:
      ABIN_FFLAGS: -O2 -fopenmp --coverage
      # To speed-up MPICH build
      CFLAGS: -O0
      GCC_V: ${{ matrix.gcc_v}}
      MPICH_V: ${{matrix.mpich_v}}

    steps:
    - uses: actions/checkout@v2
    - name: Set GFortran version
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V}
    - name: MPICH build Cache
      id: mpich-cache
      uses: actions/cache@v2
      with:
        path: ~/mpich/${{ env.MPICH_V }}/install
        key: ${{runner.os}}-mpich${{ env.MPICH_V }}-gfortran${{ env.GCC_V }}-${{hashFiles('scripts/install_mpich.sh')}}

    - name: Build and Install MPICH
      if: steps.mpich-cache.outputs.cache-hit != 'true'
      run: ./scripts/install_mpich.sh ${HOME}/mpich ${MPICH_V}

    - name: build ABIN
      run: |
            export FFLAGS=${ABIN_FFLAGS} &&\
            ./configure --mpi ${HOME}/mpich/${MPICH_V}/install &&\
            make
    - name: test ABIN
      run: make test
    - name: Codecov upload
      run:  bash <(curl -s https://codecov.io/bash)

  openmpi_build:
    runs-on: ubuntu-latest
    needs: basic_build
    strategy:
      fail-fast: false
      matrix:
         gcc_v: [7, 8, 9]
    env:
      ABIN_FFLAGS: -O0 -fopenmp
      # To speed-up OpenMPI build
      CFLAGS: -O0
      GCC_V: ${{ matrix.gcc_v}}
      OPENMPI_V: "4.0"
      OPENMPI_PATCH: "0"

    steps:
    - uses: actions/checkout@v2
    - name: Set GFortran version
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V}
    - name: OpenMPI build Cache
      id: openmpi-cache
      uses: actions/cache@v2
      with:
        path: ~/openmpi/${{ env.OPENMPI_V }}/install
        key: ${{runner.os}}-openmpi${{ env.OPENMPI_V }}-gfortran${{ env.GCC_V }}-${{hashFiles('scripts/install_openmpi.sh')}}

    - name: Build and Install OpenMPI
      if: steps.openmpi-cache.outputs.cache-hit != 'true'
      run: ./scripts/install_openmpi.sh ${HOME}/openmpi ${OPENMPI_V} ${OPENMPI_PATCH}

    - name: build ABIN
      run: |
        export FFLAGS=${ABIN_FFLAGS} &&\
        ./configure --mpi "${HOME}/openmpi/${OPENMPI_V}/install" &&\
        make
    - name: test ABIN
      run: make test


  plumed_build:
    # TODO: This is just a stub for now, need to figure out how to build Plumed
    # Once that is done, remove the following line
    if: false
    runs-on: ubuntu-latest
    needs: basic_build
    strategy:
      fail-fast: false
      matrix:
         gcc_v: [7, 8, 9]
    env:
      FFLAGS: -O2 -fopenmp
    steps:
    - uses: actions/checkout@v2
    - name: Download Plumed
      run: mkdir ~/plumed && cd ~/plumed && wget plumed_url
    - name: build Plumed
      run: cd ~/plumed && ./configure && make && make install
    # TODO: Cache plumed build
    # TODO: Maybe try different Plumed versions?
    - name: build ABIN
      run: ./configure --plumed /path/to/plumed && make
    - name: test ABIN
      run: make test
