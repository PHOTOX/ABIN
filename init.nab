#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include "nabcode.h"
extern char NAB_rsbuf[];
static int mytaskid, numtasks;
static MOLECULE_T *m;
static MOLECULE_T *my;
static STRING_T *pdbin = "input.pdb";
static STRING_T *in1 = "input.pdb";
static STRING_T *topin = "input.top";
static STRING_T *leapin = "leaprc.ff99SB";
static STRING_T *dummyin = "";

void nab_init_()
{/*
	mytaskid=0; numtasks=1;
	nabout = stdout; 
static REAL_T dummy[2];
static MOLECULE_T *my;
printf(  "Halo before getpdb\n" );
my = getpdb_prm( &pdbin , &leapin, &dummyin, 0 );
//my = getpdb( pdbin, NULL );
printf(  "Halo before readparm\n" );

//readparm( my, "input.top" );

printf(  "Halo before mmeinit\n" );
mme_init( my, NULL, "::Z", dummy, NULL );
printf(  "Halo before end\n" );
*/
	nabout = stdout; /*default*/

	mytaskid=0; numtasks=1;
static REAL_T dummy[2];
static INT_T __it0001__;
static STRING_T *__st0001__ = NULL;
static STRING_T *__st0002__ = NULL;
static STRING_T *__st0003__ = NULL;
my = getpdb_prm( STEMP( __st0001__, "input.pdb" ), STEMP( __st0002__, "leaprc.ff99" ), STEMP( __st0003__, "" ), ITEMP( __it0001__, 0 ) );
my = getpdb( "input.pdb", NULL );

readparm( my, "input.top" );

mme_init( my, NULL, "::Z", dummy, NULL );
}

void gradhess_(double *fenergy,double xyz[],REAL_T g[],REAL_T h[],INT_T *natoms,INT_T *ihess)
{
//static FILE_T *file1;
//file1 = fopen( "nab.out", "w" );
//nabout = file1; /*default*/
//
	nabout = stdout; /*default*/
static INT_T natom, i;
static REAL_T energy,dummy[2];
//static REAL_T x[7000],mass[7000], grad[7000];
static REAL_T mass[7000], grad[7000];
char names[2000];
static const REAL_T fac = ( 6.275000E+02 * 1.890000E+00 );

	mytaskid=0; numtasks=1;
static INT_T __it0001__;
static INT_T __it0002__;
static INT_T __it0003__;
static INT_T __it0004__;
static INT_T __it0005__;
static INT_T __it0006__;
static INT_T __it0007__;
static INT_T __it0008__;// set iter -1 for detailed energy info
static STRING_T *__st0001__ = NULL;

//NAB_strcpy(  &in1, SPRINTF( assert( ( snprintf( NAB_rsbuf, 10000, "%s%s", "input.pdb", argv[2 - 1] ) ) < 10000 ), NAB_strcpy(  &__st0001__, NAB_rsbuf ) ) );

m = getpdb( in1, NULL );

readparm( m, "input.top" );

mme_init( m, NULL, "::Z", dummy, NULL );

//setxyz_from_mol(  &m, NULL, x );

if (*ihess == 1) {
energy = mme2( xyz, g, h, mass, grad, ITEMP( __it0001__, 1 ), ITEMP( __it0002__, 1 ), ITEMP( __it0003__, 1 ), ITEMP( __it0004__, 1 ), ITEMP( __it0005__, 1 ), ITEMP( __it0006__, 1 ), ITEMP( __it0007__, 1 ),  &natom, ITEMP( __it0008__, -10 ) , names );
} 

if (*ihess == 0) {
energy = mme( xyz, g, ITEMP( __it0001__, -10 ) ); // set iter -1 for detailed energy info
}


*fenergy= energy / 6.275000E+02;


for( i = 1;i < 3 *  *( NAB_mri( m, "natoms" ) );i = i + 3 ){
//printf( "% .10f   % .10f   % .10f  \n", g[i - 1] / fac, g[i + 1 - 1] / fac, g[i + 2 - 1] / fac );
g[i-1]=g[i-1]/fac;
g[i]=g[i]/fac;
g[i+1]=g[i+1]/fac;
}


for( i = 1;i < 9 *  *( NAB_mri( m, "natoms" ) ) *  *( NAB_mri( m, "natoms" ) );i = i + 3 ){
//printf( "% .10f      % .10f      % .10f\n", h[i - 1] / fac / 1.890000E+00, h[i + 1 - 1] / fac / 1.890000E+00, h[i + 2 - 1] / fac / 1.890000E+00 );
h[i-1]=h[i-1]/fac/1.89;
h[i]=h[i]/fac/1.89;
h[i+1]=h[i+1]/fac/1.89;
}

/*printf(  "% .10f NABenergy \n", energy / 6.275000E+02 );
for(i=0;i< *natoms *3;i++) 
 printf(  "% .10f NABcoor \n", g[i]);

*/
}


/*
int main( argc, argv ) 
	int	argc;
	char	*argv[]; {
		REAL_T en;
	gradhess_(&en,g,h);
	printf("%f \n",energy);
	printf("%f \n",g[0]);
	printf("%f \n",h[0]);
	return 0;
}*/

