#!/bin/bash

#----------INPUT-------------------------
#--------------------------------------------


# This script is should be called by ABIN as
# MOLPRO-SH/r.molpro-sh.nacm timestep 001 nac_accu < state.dat

# You should't need to modify this file!
# Specification of CAS wavefunction is in file molpro.setup

cd BAGEL
source bagel.inp
timestep=$1
ibead=$2
input=input$ibead.nacm
nac_accu=$3

# Definition of wavefunction
# (common for both forces and NACME)

# TODO: should do this differently
rm -f ../nacm.dat

# reading from state.dat
# Number of states and which NACME to compute
read -t 2 -a nstate
read -t 2 -a tocalc

cat > $input.json << EOF
{ "bagel" : [

{
    "title" : "molecule",
    "basis" : "$basis",
    "df_basis" : "$df_basis",
    "angstrom" : "true",
    "geometry" : [
EOF
length=`cat ../geom.dat.$ibead | wc -l`
for j in `seq 1 $length`; do
    atom=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $1}')
    x=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $2}')
    y=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $3}')
    z=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $4}')
    echo -n '{ "atom" : "'$atom'", "xyz" : [ '$x', '$y', '$z' ]}' >> $input.json
    if [ $j -lt $length ]; then
        echo -n ',' >> $input.json
    fi
    echo '' >> $input.json
done
cat >> $input.json << EOF
    ]
},
EOF
if [ $timestep -ne 0 ]; then
cat >> $input.json << EOF
{
    "title" : "load_ref",
    "file" : "orbitals",
    "continue_geom" : false
},
EOF
fi
cat >> $input.json << EOF
{
    "title" : "forces",
    "grads" : [
EOF
istate=0
jstate=1
tocalc_idx=0
for ((ist1=istate; ist1<nstate-1; ist1++))
do
    for ((ist2=jstate; ist2<nstate; ist2++))
    do
        if [[ ${tocalc[$tocalc_idx]} -eq 1 ]];then
            echo "{ \"title\" : \"nacme\", \"target\" : $ist1, \"target2\" : $ist2 }," >> $input.json
        fi
        let tocalc_idx++
    done
    let jstate++
done
sed -i '$ s/,$//' $input.json
cat >> $input.json << EOF
    ],
    "export" : true,
    "method" : [ {
        "title" : "caspt2",
        "smith" : {
            "method" : "caspt2",
            "xms" : "true",
            "shift" : 0.25
        },
        "maxiter" : $maxiter,
        "nact" : $nact,
        "nclosed" : $nclosed,
        "nstate" : $nstates
  } ]
}

]}
EOF
# TODO: maxiter should go to the caspt2 loop
###############################################################




# END OF BAGEL INPUT

# BAGEL JOB
export BAGEL_NUM_THREADS=1
export OMP_NUM_THREADS=1
/home/srsen/bin/anaconda3/bin/mpirun -np 1 BAGEL $input.json > $input.out

if $( grep -q 'ERROR: EXCEPTION RAISED:  Max iteration reached during the second-order optimization.' $input.out ) ;then 
    echo "ERROR: Algorithm could not converge!"
    exit 2
fi
# Check whether all is OK.
# if [[ $? -eq 0 ]];then
   # cp $input.com.out $input.com.out.prev
# else 
   # cp $input.com.out $input.com.out.errornacm.$timestep
   # TODO: indicate different problems with different exit signals
   # exit 2
# fi

# Collect output for ABIN

# Extracting non-adiabatic coupling matrix elements (NACME)
# Better precision in $input.pun

istate=0
jstate=1
tocalc_idx=0
for ((ist1=istate; ist1<nstate-1; ist1++))
do
    for ((ist2=jstate; ist2<nstate; ist2++))
    do
        if [[ ${tocalc[$tocalc_idx]} -eq 1 ]];then
            tail -n +2 "NACME_$ist1""_""$ist2.out" | head -n -1 | awk '{print $2,$3,$4}'>>../nacm.dat
        fi
        let tocalc_idx++
    done
    let jstate++
done
