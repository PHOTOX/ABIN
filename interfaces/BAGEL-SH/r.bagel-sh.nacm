#!/bin/bash

# This script is should be called by ABIN as
# BAGEL/r.bagel.nacm timestep 001 nac_accu < state.dat

# You should't need to modify this file!
# Specification of CAS wavefunction is in file "bagel.inp"


cd BAGEL-SH
source bagel.inp
timestep=$1
ibead=$2
input=input$ibead.nacm
let nac_accu=$3+1       # default in BAGEL is 10^-8, therefore "+1"

# setting shift for caspt2 to default 0.25 if not specified in bagel.inp
if [[ -z $shift ]]; then
    shift=0.25
fi

rm -f ../nacm.dat

#-How many atoms?
natom=$(wc -l < ../geom.dat.$ibead)

# reading from state.dat
# Number of states and which NACME to compute
read -t 2 -a nstate
read -t 2 -a tocalc


cat > $input.json << EOF
{ "bagel" : [

{
    "title" : "molecule",
    "basis" : "$basis",
    "df_basis" : "$df_basis",
    "angstrom" : "true",
    "geometry" : [
EOF
# section for geometry specification in json format
awk -v natom="$natom" '{printf "{ \"atom\" : \"%s\", \"xyz\" : [ %.10f, %.10f, %.10f ]}", $1, $2, $3, $4} NR != natom {print ","}END{print ""}'  ../geom.dat.$ibead >> $input.json

cat >> $input.json << EOF
    ]
},
{
    "title" : "load_ref",
    "file" : "orbitals",
    "continue_geom" : false
},
{
    "title" : "forces",
    "grads" : [
EOF
istate=0
jstate=1
tocalc_idx=0
for ((ist1=istate; ist1<nstate-1; ist1++))
do
    for ((ist2=jstate; ist2<nstate; ist2++))
   do
        if [[ ${tocalc[$tocalc_idx]} -eq 1 ]];then
            echo "{ \"title\" : \"nacme\", \"target\" : $ist1, \"target2\" : $ist2 }," >> $input.json
        fi
        let tocalc_idx++
    done
    let jstate++
done
sed -i '$ s/,$//' $input.json
cat >> $input.json << EOF
    ],
    "export" : true,
EOF

# preparing if for method of choice selection
if [[ $method == "xms_caspt2" ]];
then

    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "nspin" : $nspin,
        "charge" : $charge,
        "smith" : {
            "method" : "caspt2",
            "xms" : "true",
            "shift" : $shift,
            "maxiter" : $maxiter_CASPT2,
            "thresh" : 1.0e-$nac_accu 
        },
EOF
elif [[ $method == "ms_caspt2" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "nspin" : $nspin,
        "charge" : $charge,
        "smith" : {
            "method" : "caspt2",
            "ms" : "true",
            "xms" : "false",
            "shift" : $shift,
            "maxiter" : $maxiter_CASPT2,
            "thresh" : 1.0e-$nac_accu
        },
EOF

# TODO:this is probably not correct
elif [[ $method == "sa_casscf" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "casscf",
        "nspin" : $nspin,
        "charge" : $charge,
EOF
else
    echo "Unknown method ($method). Available only \"xms_caspt2\", \"ms_caspt2\" or \"sa_casscf\""
fi

cat >> $input.json << EOF
        "maxiter" : $maxiter_CASSCF,
        "nact" : $nact,
        "nclosed" : $nclosed,
        "nstate" : $nstates
  } ]
},

{
    "title" : "save_ref",
    "file" : "orbitals"
}

]}
EOF

###############################################################


# END OF BAGEL INPUT

# BAGEL JOB
source SetEnvironment.sh BAGEL
$BAGELEXE $input.json > $input.out

echo "TIMESTEP = $timestep" >> $input.out.all
echo "####################" >> $input.out.all
cat $input.out >> $input.out.all


# Check whether all is OK.
if [[ $? -eq 0 ]];then
   cp $input.com.out $input.com.out.prev
elif $( grep -q 'ERROR: EXCEPTION RAISED:  Max iteration reached during the second-order optimization.' $input.out ); then 
    echo "ERROR: convergence during second-order optimization not reached (usually CASSCF not converged during NAC calculation)"
    echo "try increase maxiter_CASSCF in bagel.inp"
    cp $input.out $input.out.error.$timestep
elif $( grep -q 'ERROR: EXCEPTION RAISED:  SMITH convergence not reached.' $input.out ) ;then
    echo "ERROR: Convergence in SMITH routine not achieved! Error durring NAC calcualtion during CASPT2 routine."
    cp $input.out $input.out.error.$timestep
    echo "Try increase maxiter_CASPT2 in bagel.inp."
    exit 2
fi




# Collect output for ABIN
# Extracting non-adiabatic coupling matrix elements (NACME)

istate=0
jstate=1
tocalc_idx=0
for ((ist1=istate; ist1<nstate-1; ist1++))
do
    for ((ist2=jstate; ist2<nstate; ist2++))
    do
        if [[ ${tocalc[$tocalc_idx]} -eq 1 ]];then
            tail -n +2 "NACME_$ist1""_""$ist2.out" | head -n -1 | awk '{print $2,$3,$4}'>>../nacm.dat
        fi
        let tocalc_idx++
    done
    let jstate++
done

rm -f NACME_*
