#!/bin/bash

# You should't need to modify this file!
# Specification of CAS wavefunction is in file "bagel.inp"

set -u

cd $(dirname $0)
source bagel.inp

timestep=$1
ibead=$2
input=input$ibead
geom="../geom.dat.$ibead"

# Read Number of states, current state which NACM to compute from state.dat
read -t 2 -a nstate
read -t 2 -a tocalc

thresh="1.0e-8"   # default value is 1.0e-8 and shouldn't be modified. 
                  # In the case of persisting convergence errors, see the "CHECK CHONVERGENCES" section bellow

# Note that the actual filename is orbitals.archive
ORBITAL_FILE=orbitals

file_exists $geom

rm -f ../engrad.dat.$ibead ../nacm.dat FORCE_*

### GENERATE BAGEL INPUT
specify_molecule "$geom" "$input.json"

if [[ -f "$ORBITAL_FILE.archive" ]]; then
    # Load orbitals if the archive file exists
    load_orbitals $ORBITAL_FILE $input.json
else
    # Calculate HF guess if the initial orbitals are not provided via the 'orbitals.archive' file
    generate_hf_orbitals $input.json
fi

# Determine for which state we need to calculate forces
for ((ist=0; ist<nstate; ist++))
do
  if [[ ${tocalc[$ist]} -eq 1 ]]; then
    if [[ -z ${target_state-} ]]; then
      target_state=$ist
    else
      >&2 echo "ERROR: Invalid tocalc, cannot compute gradient for more than one state"
      exit 2
    fi
  fi
done

cat >> $input.json << EOF
  {
    "title" : "forces",
    "export" : true,
    "grads" : [
      {
        "title": "force",
        "target": $target_state
      }
    ],
EOF

# CAS section
if [[ $method == "xms_caspt2" ]]; then

    print_cas "caspt2" "$thresh" "$maxiter_CASSCF" $input.json
    print_caspt2 "true" "$thresh" "$maxiter_CASPT2" "$input.json"

elif [[ $method == "ms_caspt2" ]]; then

    print_cas "caspt2" "$thresh" "$maxiter_CASSCF" $input.json
    print_caspt2 "false" "$thresh" "$maxiter_CASPT2" "$input.json"

elif [[ $method == "sa_casscf" ]]; then

    print_cas "casscf" "$thresh" "$maxiter_CASSCF" "$input.json"
    # Remove extra dangling comma
    sed -i '$ s/,$//' "$input.json"

else

    >&2 echo "ERROR: Unknown method ($method). Specify one of \"xms_caspt2\", \"ms_caspt2\" or \"sa_casscf\" in bagel.inp"
    exit 2

fi

echo -e "      }]\n  }," >> $input.json

save_orbitals $ORBITAL_FILE $input.json

if [[ ! -f "initial_orbitals.molden" ]];then
    print_molden "initial_orbitals.molden" $input.json
else
    print_molden "orbitals.molden" $input.json
fi

echo "]}" >> $input.json
### END OF INPUT GENERATION 

### EXECUTE BAGEL
exec_bagel $input.json $input.out
returncode=$?

### CHECK CHONVERGENCES + RESTART BAGEL JOB with convergence threshold and increased itterations  ###

casscf_error='EXCEPTION RAISED:  Max iteration reached during the second-order optimization'
smith_error='EXCEPTION RAISED:  SMITH convergence not reached'

# First check if CASSCF converged, then if CASPT2 converged, if computed.
if grep -q "$casscf_error" $input.out; then
    savefile=$input.out.error.$timestep
    >&2 echo " ERROR: convergence during second-order optimization not reached (usually CASSCF not converged) - thresh set to 1.0e-7"
    >&2 echo "See file $savefile"
    cp $input.out $savefile
    # TODO: Recognize a difference between CASSCF and CASPT2 maxiter
    sed -i "s/\"thresh\": $thresh/\"thresh\": 1.0e-7/g" $input.json
    sed -i "s/\"maxiter\": $maxiter_CASSCF/\"maxiter\": 600/" $input.json
    # Run the job for the second time
    exec_bagel $input.json $input.out
    returncode=$?
fi

if grep -q "$smith_error" $input.out; then
    savefile=$input.out.error.$timestep
    >&2 echo "ERROR: Convergence in force calculation not achieved, trying again with looser thresholds and more iterations."
    >&2 echo "See file $savefile"
    cp $input.out $savefile
    sed -z -i "s/\"thresh\": $thresh/\"thresh\": 1.0e-7/g" $input.json
    sed -i "s/\"maxiter\": $maxiter_CASPT2/\"maxiter\": 1000/g" $input.json
    # Run the job for the second time
    exec_bagel $input.json $input.out
    returncode=$?
fi

if grep -q 'EXCEPTION RAISED:' $input.out; then
    errmsg="ERROR: BAGEL calculation failed!"
    bagel_error "$errmsg" "$input.out" "$input.out.error.$timestep"
fi

if [[ $returncode -ne 0 ]];then
    errmsg="ERROR: Bagel returned exit code $returncode"
    bagel_error "$errmsg" "$input.out" "$input.out.error.$timestep"
fi

# NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN

# Extract energy.
file_exists "ENERGY.out"
cat ENERGY.out > ../engrad.dat.$ibead

# Extract gradient
file_exists "FORCE_${target_state}.out"
tail -n +2 "FORCE_${target_state}.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad.dat.$ibead

cat ../state.dat >> state.dat.all
rm ../state.dat
