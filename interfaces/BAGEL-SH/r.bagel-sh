#!/bin/bash

# You should't need to modify this file.
# Specification of CAS wavefunction is in file "bagel.inp"
set -u

cd "$(dirname "$0")" || exit 1
source bagel.inp
source bagel_common.sh

timestep=$1
ibead=$2
input=input$ibead
geom="../geom.dat.$ibead"

# Read Number of states, current state which NACM to compute from state.dat
read -r -t 2 -a nstate
read -r -t 2 -a tocalc

thresh_CASSCF="1.0e-8"
thresh_CASPT2="1.0e-8"
# We will try to converge CASSCF by increasing thresh
# until we hit max_thresh_CASSCF
max_thresh_CASSCF="6.0e-6"

# Note that the actual filename is orbitals.archive
ORBITAL_FILE=orbitals

file_exists "$geom"

rm -f "../engrad.dat.$ibead" ../nacm.dat ENERGY.out FORCE_*

# Determine for which state we need to calculate forces
for ((ist=0; ist<nstate; ist++))
do
    if [[ ${tocalc[$ist]} -eq 1 ]]; then
      if [[ -z ${target_state-} ]]; then
          target_state=$ist
      else
          >&2 echo "ERROR: Invalid tocalc, cannot compute gradient for more than one state"
          exit 2
      fi
    fi
done

### GENERATE BAGEL INPUT
function generate_input {
    local input=$1
    local method=$2
 
    specify_molecule "$geom" "$input"
 
    if [[ -f "$ORBITAL_FILE.archive" ]]; then
        # Load orbitals if the archive file exists
        load_orbitals "$ORBITAL_FILE" "$input"
    else
        # Calculate HF guess if the initial orbitals are not provided via the 'orbitals.archive' file
        generate_hf_orbitals "$input"
    fi
 
    print_forces "$target_state" "$input"

    print_cas "$method" "$input"
    echo -e "      }]\n  }," >> "$input"

    save_orbitals "$ORBITAL_FILE" "$input"
    if [[ ! -f "initial_orbitals.molden" ]];then
        print_molden "initial_orbitals.molden" "$input"
    else
        print_molden "orbitals.molden" "$input"
    fi
    echo "]}" >> "$input"
}
### END OF INPUT GENERATION 

### EXECUTE BAGEL
error=false
converge_casscf "$input.json" "$input.out"
returncode=$?

### CHECK CHONVERGENCES + RESTART BAGEL JOB with convergence threshold and increased itterations  ###
smith_error='EXCEPTION RAISED:  SMITH convergence not reached'
if grep -q "$smith_error" "$input.out"; then
    error=true
    savefile=$input.out.caspt2_error.$timestep
    thresh_CASPT2="1.0e-7"
    maxiter_CASPT2=1000
    >&2 echo "ERROR: CASPT2 did not converge, trying again with thresh=$thresh_CASPT2 and maxiter=$maxiter_CASPT2."
    >&2 echo "See file $savefile"
    cp "$input.out" "$savefile"
    generate_input "$input.json" "$method"
    exec_bagel "$input".json "$input".out "$timestep"
    returncode=$?
fi

if grep -q 'EXCEPTION RAISED:' "$input.out"; then
    errmsg="ERROR: BAGEL calculation failed!"
    bagel_error "$errmsg" "$input.out" "$input.out.error.$timestep"
fi

if [[ $returncode -ne 0 ]];then
    errmsg="ERROR: Bagel returned exit code $returncode"
    bagel_error "$errmsg" "$input.out" "$input.out.error.$timestep"
fi

# NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN
# Extract energy.
file_exists "ENERGY.out"
cat ENERGY.out > "../engrad.dat.$ibead"

# Extract gradient
file_exists "FORCE_${target_state}.out"
tail -n +2 "FORCE_${target_state}.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad.dat."$ibead"

if [[ ${error:-false} = "true" ]]; then
    >&2 echo "Calculation converged with looser tresholds for timestep $timestep"
fi

cat ../state.dat >> state.dat.all
rm ../state.dat
