#!/bin/bash

cd BAGEL
source bagel.inp

timestep=$1
ibead=$2
input=input$ibead

# setting shift for caspt2 to default 0.25 if not specified in bagel.inp
if [[ -z ${shift+x} ]]; then
    shift=0.25
fi

####################################################################

rm -f ../engrad.dat.$ibead ../nacm.dat

#-How many atoms?
natom=$(cat ../geom.dat.$ibead | wc -l )

# reading from state.dat
# Number of states,state we are on and which NACM to compute
read -t 2 -a nstate
read -t 2 -a tocalc

# BAGEL-CASPT2
cat > $input.json << EOF
{ "bagel" : [

{
    "title" : "molecule",
    "basis" : "$basis",
    "df_basis" : "$df_basis",
    "angstrom" : "true",
    "geometry" : [
EOF

# section for geometry specification in json format
for j in `seq 1 $natom`; do
    atom=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $1}')
    x=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $2}')
    y=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $3}')
    z=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $4}')
    echo -n '{ "atom" : "'$atom'", "xyz" : [ '$x', '$y', '$z' ]}' >> $input.json
    if [ $j -lt $natom ]; then
        echo -n ',' >> $input.json
    fi
    echo '' >> $input.json
done
cat >> $input.json << EOF
    ]
},
EOF

# loading orbitals from previous step if not the first step
if [ $timestep -ne 0 ]; then
cat >> $input.json << EOF
{
    "title" : "load_ref",
    "file" : "orbitals",
    "continue_geom" : false
},
EOF
fi

cat >> $input.json << EOF
{
    "title" : "forces",
    "grads" : [
EOF

# why is this different to SH? otherwise include to previous cat
istate=$(expr $tocalc - 1)
echo '{ "title" : "force", "target" : '"$istate"' }' >> $input.json



cat >> $input.json << EOF
    ],
    "export" : true,
EOF


# preparing if for method of choice selection
if [[ $method == "xms" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "smith" : {
            "method" : "caspt2",
            "xms" : "true",
            "shift" : $shift
        },
EOF
elif [[ $method == "ms" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "smith" : {
            "method" : "caspt2",
            "ms" : "true",
            "xms" : "false",
            "shift" : $shift
        },
EOF
elif [[ $method == "casscf" ]];
then
    #TODO: CASSCF input must be insert!!!!!
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "smith" : {
            "method" : "caspt2",
            "ms" : "true",
            "xms" : "true",
            "shift" : $shift
        },
EOF
else
    echo "Unknown method ($method). Available only \"xms\", \"ms\" or \"casscf\""
fi

cat >> $input.json << EOF
        "maxiter" : $maxiter,
        "nact" : $nact,
        "nclosed" : $nclosed,
        "nstate" : $nstates
  } ]
},

{
    "title" : "save_ref",
    "file" : "orbitals"
}

]}
EOF

#----------BAGEL JOB-------------------------
export BAGEL_NUM_THREADS=1
export OMP_NUM_THREADS=1
/home/srsen/bin/anaconda3/bin/mpirun -np 1 BAGEL $input.json > $input.out

if $( grep -q 'ERROR: EXCEPTION RAISED:  Max iteration reached during the second-order optimization.' $input.out ) ;then 
    echo "ERROR: Algorithm could not converge!"
    exit 2
fi

#####################################################################

# NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN

# Extracting energy.
cat ENERGY.out >> ../engrad.dat.$ibead
cat ENERGY.out >> ../engrad_all.dat

# Extracting GRADIENT
tail -n +2 "FORCE_$istate.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad.dat.$ibead
tail -n +2 "FORCE_$istate.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad_all.dat


cat ../state.dat >> ../stateall.dat

echo "TIMESTEP = $timestep" >> $input.out.all
echo "####################" >> $input.out.all
cat $input.out >> $input.out.all
