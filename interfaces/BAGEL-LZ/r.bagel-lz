#!/bin/bash

cd BAGEL-LZ
source bagel.inp

timestep=$1
ibead=$2
input=input$ibead
thresh=1.0e-8       # deafult value is 1.0e-8, shouldn't be modified. In the case of persisting convergence errors, see the "CHECK CHONVERGENCES" section bellow

##############################

# setting shift for caspt2 to default 0.25 if not specified in bagel.inp
if [[ -z ${shift+x} ]]; then
    shift=0.25
fi

rm -f ../engrad.dat.$ibead ../nacm.dat

#-How many atoms?
natom=$(cat ../geom.dat.$ibead | wc -l )

# reading from state.dat
# Number of states,state we are on and which NACM to compute
read -t 2 -a nstate
read -t 2 -a tocalc

# BAGEL-CASPT2
cat > $input.json << EOF
{ "bagel" : [

{
    "title" : "molecule",
    "basis" : "$basis",
    "df_basis" : "$df_basis",
    "angstrom" : "true",
    "geometry" : [
EOF

# section for geometry specification in json format
for j in `seq 1 $natom`; do
    atom=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $1}')
    x=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $2}')
    y=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $3}')
    z=$(echo $(cat ../geom.dat.$ibead | head -n $j | tail -n 1) | awk '{print $4}')
    echo -n '{ "atom" : "'$atom'", "xyz" : [ '$x', '$y', '$z' ]}' >> $input.json
    if [ $j -lt $natom ]; then
        echo -n ',' >> $input.json
    fi
    echo '' >> $input.json
done
cat >> $input.json << EOF
    ]
},
EOF

if [ $timestep -eq 0 ];then
cat >> $input.json << EOF
{
    "title" : "$hf_variant",
    "charge" : $charge,
    "nspin" : $nspin
},

EOF
fi


# loading orbitals from previous step if not the first step
if [ $timestep -ne 0 ]; then
cat >> $input.json << EOF
{
    "title" : "load_ref",
    "file" : "orbitals",
    "continue_geom" : false
},
EOF
fi

istate=$(expr $tocalc - 1)
cat >> $input.json << EOF
{
    "title" : "forces",
    "grads" : [
    { "title" : "force", "target" : $istate }                                                                                                                                                                                           
    ],
    "export" : true,
EOF

# preparing if for method of choice selection
if [[ $method == "xms" ]];
then

    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "nspin" : $nspin,
        "charge" : $charge,
        "smith" : {
            "method" : "caspt2",
            "xms" : "true",
            "shift" : $shift,
            "maxiter" : $maxiter_CASPT2,
            "thresh" : $thresh
        },
EOF
elif [[ $method == "ms" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "caspt2",
        "nspin" : $nspin,
        "charge" : $charge,
        "smith" : {
            "method" : "caspt2",
            "ms" : "true",
            "xms" : "false",
            "shift" : $shift,
            "maxiter" : $maxiter_CASPT2,
            "thresh" : $thresh
        },
EOF
elif [[ $method == "casscf" ]];
then
    cat >> $input.json << EOF
    "method" : [ {
        "title" : "casscf",
        "nspin" : $nspin,
        "charge" : $charge,
EOF
else
    echo "Unknown method ($method). Available only \"xms\", \"ms\" or \"casscf\""
fi

cat >> $input.json << EOF 
        "maxiter" : $maxiter_CASSCF,
        "nact" : $nact,
        "nclosed" : $nclosed,
        "nstate" : $nstates
  } ]
},

{
    "title" : "save_ref",
    "file" : "orbitals"
}

]}
EOF

#----------BAGEL JOB-------------------------
export BAGEL_NUM_THREADS=1
export OMP_NUM_THREADS=1
# specific launching of BAGEL - modify for different machines
/home/srsen/bin/anaconda3/bin/mpirun -np 1 BAGEL $input.json > $input.out


echo "TIMESTEP = $timestep" >> $input.out.all
echo "####################" >> $input.out.all
cat $input.out >> $input.out.all


############ CHECK CHONVERGENCES + RESTART BAGEL JOB with  convergence threshold and increased itterations  ########################

if $( grep -q 'ERROR: EXCEPTION RAISED:  SMITH convergence not reached.' $input.out ) ;then
    echo "ERROR: Convergence in force calculation not achieved, try again with different settings! Error in SMITH."
    cp $input.out $input.out.error.$timestep
    cp $input.json $input.second_try.json
    sed -z -i "s/\"maxiter\" : $maxiter_CASPT2,\n            \"thresh\" : $thresh/\"maxiter\" : 1000,\n            \"thresh\" : 1.0e-6/"  $input.second_try.json
    ####################run the job for the second time###########################
    # specific launching of BAGEL - modify for different machines
    /home/srsen/bin/anaconda3/bin/mpirun -np 1 BAGEL  $input.second_try.json > $input.second_try.out

elif $( grep -q 'ERROR: EXCEPTION RAISED:  Max iteration reached during the second-order optimization.' $input.out ) ; then
    echo " ERROR: convergence during second-order optimization not reached (usually CASSCF not converged)"
    cp $input.out $input.out.error.$timestep  
    cp $input.json $input.second_try.json
    sed -z -i "s/\"maxiter\" : $maxiter_CASSCF,\n        \"nact\" : $nact,/\"maxiter\" : 1500,\n        \"nact\" : $nact,/" $input.second_try.json
    ####################run the job for the second time###########################
    # specific launching of BAGEL - modify for different machines
    /home/srsen/bin/anaconda3/bin/mpirun -np 1 BAGEL  $input.second_try.json > $input.second_try.out
fi

if $( grep -q 'ERROR: EXCEPTION RAISED:' $input.second_try.out ) ;then
    echo "ERROR: second try of forces calculation did not converge"
    exit 2
fi

# COMMENT: Authors of BAGEL claim, that CASSCF implementation is great and any convergence error must have origin in wrong active space or somethink like that. 
# COMMENT: Therefore, I skipped changing covergence criteria during CASSCF routine. 


####################################################################

# NOW IT'S TIME TO COLLECT ALL THE DATA FOR ABIN

# Extracting energy.
cat ENERGY.out >> ../engrad.dat.$ibead
cat ENERGY.out >> ../engrad_all.dat

# Extracting GRADIENT
tail -n +2 "FORCE_$istate.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad.dat.$ibead
tail -n +2 "FORCE_$istate.out" | head -n -1 | awk '{print $2,$3,$4}'>>../engrad_all.dat

cat ../state.dat >> ../stateall.dat

rm -f FORCE_*
echo "TIMESTEP = $timestep" >> $input.out.all
echo "####################" >> $input.out.all
cat $input.out >> $input.out.all
