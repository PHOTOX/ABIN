#!/bin/bash
cd $(dirname $0)
timestep=$1
ibead=$2
input=input$ibead
abingeom="$PWD/../geom.dat.$ibead"
natom=$(wc -l < $abingeom)

TYPE="RI-MP2" # RI-DFT|DFT|RI-MP2
# Directory with all input files generated by "define"
TURBO_INPUTS="INITIAL_RIMP2"
TURBO_CONTROL=$TURBO_INPUTS/control

source ../SetEnvironment.sh TURBOMOLE

SCRATCH="scratch.$ibead"

if [ -d $SCRATCH ];then
  # For safety reasons, we delete the dir at each time step
  # and only (possibly) reuse orbitals
  mv $SCRATCH/mos mos.$ibead
  rm -r $SCRATCH
  cp -r $TURBO_INPUTS $SCRATCH
  # Comment this line if you do NOT want to reuse orbitals from previous step
  # Check your energy conservation in short NVE MD!
  # You might need to tighten the SCF convergence threshold to 1e-7
  # when reusing the orbitals
  mv mos.$ibead $SCRATCH/mos
else
  cp -r $TURBO_INPUTS $SCRATCH
fi

BACK=$PWD
cd $SCRATCH

# Prepare coordinates
xyzgeom=geom.xyz
echo $natom > $xyzgeom
echo "" >> $xyzgeom
cat $abingeom >> $xyzgeom
x2t $xyzgeom > coord
 
ERROR_FILE=err.out
if [[ $TYPE = "RI-DFT" ]];then
  ridft > energy.out 2>$ERROR_FILE || exit 1
  rdgrad > grad.out 2>>$ERROR_FILE || exit 1
elif [[ $TYPE = "DFT" ]];then
  dscf > energy.out 2>$ERROR_FILE || exit 1
  grad > grad.out 2>>$ERROR_FILE || exit 1
elif [[ $TYPE = "RI-MP2" ]];then
  dscf  > scf.out 2>$ERROR_FILE || exit 1
  ricc2 > grad.out 2>>$ERROR_FILE || exit 1
  # D1 diagnostic indicates multireference character in reference HF state
  if [[ $timestep -eq 0 ]];then
    rm -f $BACK/d1_diagnostic.dat
  fi
  grep 'D1 diagnostic' grad.out|tail -1|awk '{print $4}'>>$BACK/d1_diagnostic.dat
else
  echo "ERROR: Wrong calculation type in $0"
  exit 2
fi

# Extract energy and gradients
if [[ $TYPE = "RI-MP2" ]];then

  grep 'Final MP2 energy' grad.out | awk '{print $6}' | tail -1 > $BACK/../engrad.dat.$ibead

  gradlines=$(grep -c 'dE/dx' grad.out)
  for ((i=1;i<=gradlines;i++)) {
    gradx=( ${gradx[@]} $(grep 'dE/dx' grad.out|head -$i|sed "s/dE\/dx//"| tail -1) )
    grady=( ${grady[@]} $(grep 'dE/dy' grad.out|head -$i|sed "s/dE\/dy//"| tail -1) )
    gradz=( ${gradz[@]} $(grep 'dE/dz' grad.out|head -$i|sed "s/dE\/dz//"| tail -1) )
  }
  for ((i=0;i<natom;i++)){
    echo "${gradx[$i]} ${grady[$i]} ${gradz[$i]}" >> $BACK/../engrad.dat.$ibead
  }

else

  grep 'total energy' energy.out | awk '{print $5}'|tail -1 > $BACK/../engrad.dat.$ibead
  let natom1=natom+1
  if [[ -f gradient ]];then
    tail -$natom1 gradient|head -$natom|awk '{print $1,$2,$3}'>> $BACK/../engrad.dat.$ibead
  else
    echo "ERROR: file \"gradient\" not found!"
    exit 2
  fi
fi

